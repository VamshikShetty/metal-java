/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.InvitationList;
import java.util.UUID;
import com.equinix.openapi.metal.v1.model.User;
import com.equinix.openapi.metal.v1.model.UserCreateInput;
import com.equinix.openapi.metal.v1.model.UserList;
import com.equinix.openapi.metal.v1.model.UserUpdateInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Create a user
     *
     * Creates a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        UserCreateInput userCreateInput = null;
        User response = api.createUser(userCreateInput);
        // TODO: test validations
    }

    /**
     * Retrieve the current user
     *
     * Returns the user object for the currently logged-in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findCurrentUserTest() throws ApiException {
        List<String> include = null;
        List<String> exclude = null;
        User response = api.findCurrentUser(include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve current user invitations
     *
     * Returns all invitations in current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInvitationsTest() throws ApiException {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findInvitations(include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve a user
     *
     * Returns a single user if the user has access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        User response = api.findUserById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of a user
     *
     * Provides the custom metadata stored for this user in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUserCustomdataTest() throws ApiException {
        UUID id = null;
        api.findUserCustomdata(id);
        // TODO: test validations
    }

    /**
     * Retrieve all users
     *
     * Returns a list of users that the are accessible to the current user (all users in the current userâ€™s projects, essentially).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findUsersTest() throws ApiException {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        UserList response = api.findUsers(include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Update the current user
     *
     * Updates the currently logged-in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCurrentUserTest() throws ApiException {
        UserUpdateInput userUpdateInput = null;
        User response = api.updateCurrentUser(userUpdateInput);
        // TODO: test validations
    }

}
