/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.CreateConnectionPortVirtualCircuit201Response;
import com.equinix.openapi.metal.v1.model.CreateConnectionPortVirtualCircuitRequest;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.Interconnection;
import com.equinix.openapi.metal.v1.model.InterconnectionCreateInput;
import com.equinix.openapi.metal.v1.model.InterconnectionList;
import com.equinix.openapi.metal.v1.model.InterconnectionPort;
import com.equinix.openapi.metal.v1.model.InterconnectionPortList;
import com.equinix.openapi.metal.v1.model.InterconnectionUpdateInput;
import java.util.UUID;
import com.equinix.openapi.metal.v1.model.UpdateVirtualCircuitRequest;
import com.equinix.openapi.metal.v1.model.VirtualCircuitList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionsApi
 */
@Disabled
public class ConnectionsApiTest {

    private final ConnectionsApi api = new ConnectionsApi();

    /**
     * Create a new Virtual Circuit
     *
     * Create a new Virtual Circuit on a dedicated connection. To create a regular Virtual Circuit, specify a Virtual Network record and an NNI VLAN value. To create a VRF-based Virtual Circuit, specify the VRF ID and subnet, along with the NNI VLAN value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectionPortVirtualCircuitTest() throws ApiException {
        UUID connectionId = null;
        UUID portId = null;
        CreateConnectionPortVirtualCircuitRequest createConnectionPortVirtualCircuitRequest = null;
        CreateConnectionPortVirtualCircuit201Response response = api.createConnectionPortVirtualCircuit(connectionId, portId, createConnectionPortVirtualCircuitRequest);
        // TODO: test validations
    }

    /**
     * Request a new connection for the organization
     *
     * Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInterconnectionTest() throws ApiException {
        UUID organizationId = null;
        InterconnectionCreateInput interconnectionCreateInput = null;
        Interconnection response = api.createOrganizationInterconnection(organizationId, interconnectionCreateInput);
        // TODO: test validations
    }

    /**
     * Request a new connection for the project&#39;s organization
     *
     * Creates a new connection request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectInterconnectionTest() throws ApiException {
        UUID projectId = null;
        InterconnectionCreateInput interconnectionCreateInput = null;
        Interconnection response = api.createProjectInterconnection(projectId, interconnectionCreateInput);
        // TODO: test validations
    }

    /**
     * Delete connection
     *
     * Delete a connection, its associated ports and virtual circuits.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInterconnectionTest() throws ApiException {
        UUID connectionId = null;
        Interconnection response = api.deleteInterconnection(connectionId);
        // TODO: test validations
    }

    /**
     * Delete a virtual circuit
     *
     * Delete a virtual circuit from a dedicated port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVirtualCircuitTest() throws ApiException {
        UUID id = null;
        CreateConnectionPortVirtualCircuit201Response response = api.deleteVirtualCircuit(id);
        // TODO: test validations
    }

    /**
     * Get a connection port
     *
     * Get the details of an connection port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectionPortTest() throws ApiException {
        UUID connectionId = null;
        UUID id = null;
        InterconnectionPort response = api.getConnectionPort(connectionId, id);
        // TODO: test validations
    }

    /**
     * Get connection
     *
     * Get the details of a connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInterconnectionTest() throws ApiException {
        UUID connectionId = null;
        Interconnection response = api.getInterconnection(connectionId);
        // TODO: test validations
    }

    /**
     * Get a virtual circuit
     *
     * Get the details of a virtual circuit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVirtualCircuitTest() throws ApiException {
        UUID id = null;
        CreateConnectionPortVirtualCircuit201Response response = api.getVirtualCircuit(id);
        // TODO: test validations
    }

    /**
     * List a connection port&#39;s virtual circuits
     *
     * List the virtual circuit record(s) associatiated with a particular connection port.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectionPortVirtualCircuitsTest() throws ApiException {
        UUID connectionId = null;
        UUID portId = null;
        VirtualCircuitList response = api.listConnectionPortVirtualCircuits(connectionId, portId);
        // TODO: test validations
    }

    /**
     * List a connection&#39;s ports
     *
     * List the ports associated to an connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectionPortsTest() throws ApiException {
        UUID connectionId = null;
        InterconnectionPortList response = api.listConnectionPorts(connectionId);
        // TODO: test validations
    }

    /**
     * List organization connections
     *
     * List the connections belonging to the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void organizationListInterconnectionsTest() throws ApiException {
        UUID organizationId = null;
        InterconnectionList response = api.organizationListInterconnections(organizationId);
        // TODO: test validations
    }

    /**
     * List project connections
     *
     * List the connections belonging to the project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectListInterconnectionsTest() throws ApiException {
        UUID projectId = null;
        InterconnectionList response = api.projectListInterconnections(projectId);
        // TODO: test validations
    }

    /**
     * Update connection
     *
     * Update the details of a connection
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInterconnectionTest() throws ApiException {
        UUID connectionId = null;
        InterconnectionUpdateInput interconnectionUpdateInput = null;
        Interconnection response = api.updateInterconnection(connectionId, interconnectionUpdateInput);
        // TODO: test validations
    }

    /**
     * Update a virtual circuit
     *
     * Update the details of a virtual circuit.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVirtualCircuitTest() throws ApiException {
        UUID id = null;
        UpdateVirtualCircuitRequest updateVirtualCircuitRequest = null;
        CreateConnectionPortVirtualCircuit201Response response = api.updateVirtualCircuit(id, updateVirtualCircuitRequest);
        // TODO: test validations
    }

}
