/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.AuthToken;
import com.equinix.openapi.metal.v1.model.AuthTokenInput;
import com.equinix.openapi.metal.v1.model.AuthTokenList;
import com.equinix.openapi.metal.v1.model.Error;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Disabled
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    /**
     * Create a API key
     *
     * Creates a API key for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAPIKeyTest() throws ApiException {
        AuthTokenInput authTokenInput = null;
        AuthToken response = api.createAPIKey(authTokenInput);
        // TODO: test validations
    }

    /**
     * Create an API key for a project.
     *
     * Creates an API key for a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectAPIKeyTest() throws ApiException {
        UUID id = null;
        AuthTokenInput authTokenInput = null;
        AuthToken response = api.createProjectAPIKey(id, authTokenInput);
        // TODO: test validations
    }

    /**
     * Delete the API key
     *
     * Deletes the API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAPIKeyTest() throws ApiException {
        UUID id = null;
        api.deleteAPIKey(id);
        // TODO: test validations
    }

    /**
     * Delete the API key
     *
     * Deletes the current user API key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAPIKeyTest() throws ApiException {
        UUID id = null;
        api.deleteUserAPIKey(id);
        // TODO: test validations
    }

    /**
     * Retrieve all user API keys
     *
     * Returns all API keys for the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findAPIKeysTest() throws ApiException {
        List<String> include = null;
        List<String> exclude = null;
        AuthTokenList response = api.findAPIKeys(include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve all API keys for the project.
     *
     * Returns all API keys for a specific project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectAPIKeysTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        AuthTokenList response = api.findProjectAPIKeys(id, include, exclude);
        // TODO: test validations
    }

}
