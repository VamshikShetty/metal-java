/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.SSHKey;
import com.equinix.openapi.metal.v1.model.SSHKeyCreateInput;
import com.equinix.openapi.metal.v1.model.SSHKeyInput;
import com.equinix.openapi.metal.v1.model.SSHKeyList;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SshKeysApi
 */
@Disabled
public class SshKeysApiTest {

    private final SshKeysApi api = new SshKeysApi();

    /**
     * Create a ssh key for the given project
     *
     * Creates a ssh key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectSSHKeyTest() throws ApiException {
        UUID id = null;
        SSHKeyCreateInput ssHKeyCreateInput = null;
        SSHKey response = api.createProjectSSHKey(id, ssHKeyCreateInput);
        // TODO: test validations
    }

    /**
     * Create a ssh key for the current user
     *
     * Creates a ssh key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSSHKeyTest() throws ApiException {
        SSHKeyCreateInput ssHKeyCreateInput = null;
        SSHKey response = api.createSSHKey(ssHKeyCreateInput);
        // TODO: test validations
    }

    /**
     * Delete the ssh key
     *
     * Deletes the ssh key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSSHKeyTest() throws ApiException {
        UUID id = null;
        api.deleteSSHKey(id);
        // TODO: test validations
    }

    /**
     * Retrieve a device&#39;s ssh keys
     *
     * Returns a collection of the device&#39;s ssh keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDeviceSSHKeysTest() throws ApiException {
        UUID id = null;
        String searchString = null;
        List<String> include = null;
        List<String> exclude = null;
        SSHKeyList response = api.findDeviceSSHKeys(id, searchString, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve a project&#39;s ssh keys
     *
     * Returns a collection of the project&#39;s ssh keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectSSHKeysTest() throws ApiException {
        UUID id = null;
        String searchString = null;
        List<String> include = null;
        List<String> exclude = null;
        SSHKeyList response = api.findProjectSSHKeys(id, searchString, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve a ssh key
     *
     * Returns a single ssh key if the user has access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findSSHKeyByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        SSHKey response = api.findSSHKeyById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve all ssh keys
     *
     * Returns a collection of the userâ€™s ssh keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findSSHKeysTest() throws ApiException {
        String searchString = null;
        List<String> include = null;
        List<String> exclude = null;
        SSHKeyList response = api.findSSHKeys(searchString, include, exclude);
        // TODO: test validations
    }

    /**
     * Update the ssh key
     *
     * Updates the ssh key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSSHKeyTest() throws ApiException {
        UUID id = null;
        SSHKeyInput ssHKeyInput = null;
        SSHKey response = api.updateSSHKey(id, ssHKeyInput);
        // TODO: test validations
    }

}
