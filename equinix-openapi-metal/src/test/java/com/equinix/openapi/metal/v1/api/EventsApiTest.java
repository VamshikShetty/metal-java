/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.Event;
import com.equinix.openapi.metal.v1.model.EventList;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Retrieve connection events
     *
     * Returns a list of the connection events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findConnectionEventsTest() throws ApiException {
        UUID connectionId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        Event response = api.findConnectionEvents(connectionId, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve connection port events
     *
     * Returns a list of the connection port events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findConnectionPortEventsTest() throws ApiException {
        UUID connectionId = null;
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        Event response = api.findConnectionPortEvents(connectionId, id, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve device&#39;s events
     *
     * Returns a list of events pertaining to a specific device
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDeviceEventsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        EventList response = api.findDeviceEvents(id, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve an event
     *
     * Returns a single event if the user has access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findEventByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Event response = api.findEventById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve current user&#39;s events
     *
     * Returns a list of the current userâ€™s events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findEventsTest() throws ApiException {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        EventList response = api.findEvents(include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve organization&#39;s events
     *
     * Returns a list of events for a single organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationEventsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        EventList response = api.findOrganizationEvents(id, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve project&#39;s events
     *
     * Returns a list of events for a single project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectEventsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        EventList response = api.findProjectEvents(id, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve connection events
     *
     * Returns a list of the virtual circuit events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findVirtualCircuitEventsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        Event response = api.findVirtualCircuitEvents(id, include, exclude, page, perPage);
        // TODO: test validations
    }

}
