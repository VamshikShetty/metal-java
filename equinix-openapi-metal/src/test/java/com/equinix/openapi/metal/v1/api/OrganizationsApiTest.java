/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.Invitation;
import com.equinix.openapi.metal.v1.model.InvitationInput;
import com.equinix.openapi.metal.v1.model.InvitationList;
import com.equinix.openapi.metal.v1.model.OperatingSystemList;
import com.equinix.openapi.metal.v1.model.Organization;
import com.equinix.openapi.metal.v1.model.OrganizationInput;
import com.equinix.openapi.metal.v1.model.OrganizationList;
import com.equinix.openapi.metal.v1.model.PaymentMethod;
import com.equinix.openapi.metal.v1.model.PaymentMethodCreateInput;
import com.equinix.openapi.metal.v1.model.PaymentMethodList;
import com.equinix.openapi.metal.v1.model.PlanList;
import com.equinix.openapi.metal.v1.model.Project;
import com.equinix.openapi.metal.v1.model.ProjectCreateInput;
import com.equinix.openapi.metal.v1.model.ProjectList;
import com.equinix.openapi.metal.v1.model.TransferRequestList;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Disabled
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    /**
     * Create an organization
     *
     * Creates an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws ApiException {
        OrganizationInput organizationInput = null;
        Organization response = api.createOrganization(organizationInput);
        // TODO: test validations
    }

    /**
     * Create an invitation for an organization
     *
     * In order to add a user to an organization, they must first be invited. To invite to several projects the parameter &#x60;projects_ids:[a,b,c]&#x60; can be used
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationInvitationTest() throws ApiException {
        UUID id = null;
        InvitationInput invitationInput = null;
        Invitation response = api.createOrganizationInvitation(id, invitationInput);
        // TODO: test validations
    }

    /**
     * Create a project for the organization
     *
     * Creates a new project for the organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationProjectTest() throws ApiException {
        UUID id = null;
        ProjectCreateInput projectCreateInput = null;
        Project response = api.createOrganizationProject(id, projectCreateInput);
        // TODO: test validations
    }

    /**
     * Create a payment method for the given organization
     *
     * Creates a payment method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentMethodTest() throws ApiException {
        UUID id = null;
        PaymentMethodCreateInput paymentMethodCreateInput = null;
        PaymentMethod response = api.createPaymentMethod(id, paymentMethodCreateInput);
        // TODO: test validations
    }

    /**
     * Delete the organization
     *
     * Deletes the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws ApiException {
        UUID id = null;
        api.deleteOrganization(id);
        // TODO: test validations
    }

    /**
     * Retrieve all operating systems visible by the organization
     *
     * Returns a listing of available operating systems for the given organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOperatingSystemsByOrganizationTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        OperatingSystemList response = api.findOperatingSystemsByOrganization(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve an organization&#39;s details
     *
     * Returns a single organization&#39;s details, if the user is authorized to view it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Organization response = api.findOrganizationById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of an organization
     *
     * Provides the custom metadata stored for this organization in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationCustomdataTest() throws ApiException {
        UUID id = null;
        api.findOrganizationCustomdata(id);
        // TODO: test validations
    }

    /**
     * Retrieve organization invitations
     *
     * Returns all invitations in an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationInvitationsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findOrganizationInvitations(id, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all payment methods of an organization
     *
     * Returns all payment methods of an organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationPaymentMethodsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        PaymentMethodList response = api.findOrganizationPaymentMethods(id, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all projects of an organization
     *
     * Returns a collection of projects that belong to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationProjectsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        ProjectList response = api.findOrganizationProjects(id, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all project transfer requests from or to an organization
     *
     * Provides a collection of project transfer requests from or to the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationTransfersTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        TransferRequestList response = api.findOrganizationTransfers(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve all organizations
     *
     * Returns a list of organizations that are accessible to the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationsTest() throws ApiException {
        String personal = null;
        String withoutProjects = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        OrganizationList response = api.findOrganizations(personal, withoutProjects, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all plans visible by the organization
     *
     * Returns a listing of available plans for the given organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findPlansByOrganizationTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        PlanList response = api.findPlansByOrganization(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Update the organization
     *
     * Updates the organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws ApiException {
        UUID id = null;
        OrganizationInput organizationInput = null;
        Organization response = api.updateOrganization(id, organizationInput);
        // TODO: test validations
    }

}
