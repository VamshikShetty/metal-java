/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.BGPSessionInput;
import com.equinix.openapi.metal.v1.model.BgpSession;
import com.equinix.openapi.metal.v1.model.BgpSessionList;
import com.equinix.openapi.metal.v1.model.BgpSessionNeighbors;
import com.equinix.openapi.metal.v1.model.Device;
import com.equinix.openapi.metal.v1.model.DeviceCreateInput;
import com.equinix.openapi.metal.v1.model.DeviceList;
import com.equinix.openapi.metal.v1.model.DeviceUpdateInput;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.IPAssignment;
import com.equinix.openapi.metal.v1.model.IPAssignmentInput;
import com.equinix.openapi.metal.v1.model.IPAssignmentList;
import com.equinix.openapi.metal.v1.model.Timeframe;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Create a BGP session
     *
     * Creates a BGP session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBgpSessionTest() throws ApiException {
        UUID id = null;
        BGPSessionInput bgPSessionInput = null;
        BgpSession response = api.createBgpSession(id, bgPSessionInput);
        // TODO: test validations
    }

    /**
     * Create a device
     *
     * Creates a new device and provisions it in the specified location.  Device type-specific options are accepted.  For example, &#x60;baremetal&#x60; devices accept &#x60;operating_system&#x60;, &#x60;hostname&#x60;, and &#x60;plan&#x60;. These parameters may not be accepted for other device types. The default device type is &#x60;baremetal&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeviceTest() throws ApiException {
        UUID id = null;
        DeviceCreateInput deviceCreateInput = null;
        Device response = api.createDevice(id, deviceCreateInput);
        // TODO: test validations
    }

    /**
     * Create an ip assignment
     *
     * Creates an ip assignment for a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIPAssignmentTest() throws ApiException {
        UUID id = null;
        IPAssignmentInput ipAssignmentInput = null;
        IPAssignment response = api.createIPAssignment(id, ipAssignmentInput);
        // TODO: test validations
    }

    /**
     * Delete the device
     *
     * Deletes a device and deprovisions it in our datacenter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        UUID id = null;
        Boolean forceDelete = null;
        api.deleteDevice(id, forceDelete);
        // TODO: test validations
    }

    /**
     * Retrieve all BGP sessions
     *
     * Provides a listing of available BGP sessions for the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findBgpSessionsTest() throws ApiException {
        UUID id = null;
        BgpSessionList response = api.findBgpSessions(id);
        // TODO: test validations
    }

    /**
     * Retrieve a device
     *
     * Type-specific options (such as facility for baremetal devices) will be included as part of the main data structure.                          State value can be one of: active inactive queued or provisioning
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDeviceByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Device response = api.findDeviceById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of an instance
     *
     * Provides the custom metadata stored for this instance in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findDeviceCustomdataTest() throws ApiException {
        UUID id = null;
        api.findDeviceCustomdata(id);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of an IP Assignment
     *
     * Provides the custom metadata stored for this IP Assignment in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findIPAssignmentCustomdataTest() throws ApiException {
        UUID instanceId = null;
        UUID id = null;
        api.findIPAssignmentCustomdata(instanceId, id);
        // TODO: test validations
    }

    /**
     * Retrieve all ip assignments
     *
     * Returns all ip assignments for a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findIPAssignmentsTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        IPAssignmentList response = api.findIPAssignments(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve an instance bandwidth
     *
     * Retrieve an instance bandwidth for a given period of time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findInstanceBandwidthTest() throws ApiException {
        UUID id = null;
        String from = null;
        String until = null;
        api.findInstanceBandwidth(id, from, until);
        // TODO: test validations
    }

    /**
     * Retrieve all devices of an organization
     *
     * Provides a collection of devices for a given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findOrganizationDevicesTest() throws ApiException {
        UUID id = null;
        String facility = null;
        String hostname = null;
        Boolean reserved = null;
        String tag = null;
        String type = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        DeviceList response = api.findOrganizationDevices(id, facility, hostname, reserved, tag, type, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all devices of a project
     *
     * Provides a collection of devices for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectDevicesTest() throws ApiException {
        UUID id = null;
        String facility = null;
        String hostname = null;
        Boolean reserved = null;
        String tag = null;
        String type = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        DeviceList response = api.findProjectDevices(id, facility, hostname, reserved, tag, type, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve device traffic
     *
     * Returns traffic for a specific device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findTrafficTest() throws ApiException {
        UUID id = null;
        String direction = null;
        Timeframe timeframe = null;
        String interval = null;
        String bucket = null;
        api.findTraffic(id, direction, timeframe, interval, bucket);
        // TODO: test validations
    }

    /**
     * Retrieve BGP neighbor data for this device
     *
     * Provides a summary of the BGP neighbor data associated to the BGP sessions for this device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBgpNeighborDataTest() throws ApiException {
        UUID id = null;
        BgpSessionNeighbors response = api.getBgpNeighborData(id);
        // TODO: test validations
    }

    /**
     * Perform an action
     *
     * Performs an action for the given device.  Possible actions include: power_on, power_off, reboot, reinstall, and rescue (reboot the device into rescue OS.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performActionTest() throws ApiException {
        UUID id = null;
        String type = null;
        api.performAction(id, type);
        // TODO: test validations
    }

    /**
     * Update the device
     *
     * Updates the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        UUID id = null;
        DeviceUpdateInput deviceUpdateInput = null;
        Device response = api.updateDevice(id, deviceUpdateInput);
        // TODO: test validations
    }

}
