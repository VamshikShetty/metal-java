/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.License;
import com.equinix.openapi.metal.v1.model.LicenseCreateInput;
import com.equinix.openapi.metal.v1.model.LicenseList;
import com.equinix.openapi.metal.v1.model.LicenseUpdateInput;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LicensesApi
 */
@Disabled
public class LicensesApiTest {

    private final LicensesApi api = new LicensesApi();

    /**
     * Create a License
     *
     * Creates a new license for the given project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLicenseTest() throws ApiException {
        UUID id = null;
        LicenseCreateInput licenseCreateInput = null;
        License response = api.createLicense(id, licenseCreateInput);
        // TODO: test validations
    }

    /**
     * Delete the license
     *
     * Deletes a license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLicenseTest() throws ApiException {
        UUID id = null;
        api.deleteLicense(id);
        // TODO: test validations
    }

    /**
     * Retrieve a license
     *
     * Returns a license
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findLicenseByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        License response = api.findLicenseById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve all licenses
     *
     * Provides a collection of licenses for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectLicensesTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        LicenseList response = api.findProjectLicenses(id, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Update the license
     *
     * Updates the license.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLicenseTest() throws ApiException {
        UUID id = null;
        LicenseUpdateInput licenseUpdateInput = null;
        License response = api.updateLicense(id, licenseUpdateInput);
        // TODO: test validations
    }

}
