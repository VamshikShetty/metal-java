/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.ApiException;
import com.equinix.openapi.metal.v1.model.Error;
import com.equinix.openapi.metal.v1.model.Invitation;
import com.equinix.openapi.metal.v1.model.InvitationInput;
import com.equinix.openapi.metal.v1.model.InvitationList;
import com.equinix.openapi.metal.v1.model.MembershipList;
import com.equinix.openapi.metal.v1.model.Project;
import com.equinix.openapi.metal.v1.model.ProjectCreateFromRootInput;
import com.equinix.openapi.metal.v1.model.ProjectList;
import com.equinix.openapi.metal.v1.model.ProjectUpdateInput;
import com.equinix.openapi.metal.v1.model.TransferRequest;
import com.equinix.openapi.metal.v1.model.TransferRequestInput;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Create a project
     *
     * Creates a new project for the user default organization. If the user don&#39;t have an organization, a new one will be created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        ProjectCreateFromRootInput projectCreateFromRootInput = null;
        Project response = api.createProject(projectCreateFromRootInput);
        // TODO: test validations
    }

    /**
     * Create an invitation for a project
     *
     * In order to add a user to a project, they must first be invited.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectInvitationTest() throws ApiException {
        UUID projectId = null;
        InvitationInput invitationInput = null;
        Invitation response = api.createProjectInvitation(projectId, invitationInput);
        // TODO: test validations
    }

    /**
     * Create a transfer request
     *
     * Organization owners can transfer their projects to other organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransferRequestTest() throws ApiException {
        UUID id = null;
        TransferRequestInput transferRequestInput = null;
        TransferRequest response = api.createTransferRequest(id, transferRequestInput);
        // TODO: test validations
    }

    /**
     * Delete the project
     *
     * Deletes the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        UUID id = null;
        api.deleteProject(id);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of an IP Reservation
     *
     * Provides the custom metadata stored for this IP Reservation in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findIPReservationCustomdataTest() throws ApiException {
        UUID projectId = null;
        UUID id = null;
        api.findIPReservationCustomdata(projectId, id);
        // TODO: test validations
    }

    /**
     * Retrieve a project
     *
     * Returns a single project if the user has access
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectByIdTest() throws ApiException {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Project response = api.findProjectById(id, include, exclude);
        // TODO: test validations
    }

    /**
     * Retrieve the custom metadata of a project
     *
     * Provides the custom metadata stored for this project in json format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectCustomdataTest() throws ApiException {
        UUID id = null;
        api.findProjectCustomdata(id);
        // TODO: test validations
    }

    /**
     * Retrieve project invitations
     *
     * Returns all invitations in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectInvitationsTest() throws ApiException {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findProjectInvitations(projectId, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve project memberships
     *
     * Returns all memberships in a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectMembershipsTest() throws ApiException {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        MembershipList response = api.findProjectMemberships(projectId, include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Retrieve all projects
     *
     * Returns a collection of projects that the current user is a member of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findProjectsTest() throws ApiException {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        ProjectList response = api.findProjects(include, exclude, page, perPage);
        // TODO: test validations
    }

    /**
     * Update the project
     *
     * Updates the project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        UUID id = null;
        ProjectUpdateInput projectUpdateInput = null;
        Project response = api.updateProject(id, projectUpdateInput);
        // TODO: test validations
    }

}
