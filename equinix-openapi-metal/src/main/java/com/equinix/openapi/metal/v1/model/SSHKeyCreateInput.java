/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.equinix.openapi.JSON;

/**
 * SSHKeyCreateInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SSHKeyCreateInput {
  public static final String SERIALIZED_NAME_INSTANCES_IDS = "instances_ids";
  @SerializedName(SERIALIZED_NAME_INSTANCES_IDS)
  private List<UUID> instancesIds = null;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public SSHKeyCreateInput() { 
  }

  public SSHKeyCreateInput instancesIds(List<UUID> instancesIds) {
    
    this.instancesIds = instancesIds;
    return this;
  }

  public SSHKeyCreateInput addInstancesIdsItem(UUID instancesIdsItem) {
    if (this.instancesIds == null) {
      this.instancesIds = new ArrayList<>();
    }
    this.instancesIds.add(instancesIdsItem);
    return this;
  }

   /**
   * List of instance UUIDs to associate SSH key with, when empty array is sent all instances belonging       to entity will be included
   * @return instancesIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of instance UUIDs to associate SSH key with, when empty array is sent all instances belonging       to entity will be included")

  public List<UUID> getInstancesIds() {
    return instancesIds;
  }


  public void setInstancesIds(List<UUID> instancesIds) {
    this.instancesIds = instancesIds;
  }


  public SSHKeyCreateInput key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public SSHKeyCreateInput label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SSHKeyCreateInput ssHKeyCreateInput = (SSHKeyCreateInput) o;
    return Objects.equals(this.instancesIds, ssHKeyCreateInput.instancesIds) &&
        Objects.equals(this.key, ssHKeyCreateInput.key) &&
        Objects.equals(this.label, ssHKeyCreateInput.label);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instancesIds, key, label);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SSHKeyCreateInput {\n");
    sb.append("    instancesIds: ").append(toIndentedString(instancesIds)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instances_ids");
    openapiFields.add("key");
    openapiFields.add("label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SSHKeyCreateInput
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (SSHKeyCreateInput.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in SSHKeyCreateInput is not found in the empty JSON string", SSHKeyCreateInput.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SSHKeyCreateInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SSHKeyCreateInput` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (jsonObj.get("instances_ids") != null && !jsonObj.get("instances_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instances_ids` to be an array in the JSON string but got `%s`", jsonObj.get("instances_ids").toString()));
      }
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if (jsonObj.get("label") != null && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SSHKeyCreateInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SSHKeyCreateInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SSHKeyCreateInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SSHKeyCreateInput.class));

       return (TypeAdapter<T>) new TypeAdapter<SSHKeyCreateInput>() {
           @Override
           public void write(JsonWriter out, SSHKeyCreateInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SSHKeyCreateInput read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SSHKeyCreateInput given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SSHKeyCreateInput
  * @throws IOException if the JSON string is invalid with respect to SSHKeyCreateInput
  */
  public static SSHKeyCreateInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SSHKeyCreateInput.class);
  }

 /**
  * Convert an instance of SSHKeyCreateInput to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

