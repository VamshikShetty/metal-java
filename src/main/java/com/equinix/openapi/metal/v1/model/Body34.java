/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Body34
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-20T13:48:24.543Z")
public class Body34 {
  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("contact_email")
  private String contactEmail = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("metro")
  private String metro = null;

  /**
   * The mode of the connection (only relevant to dedicated connections). Shared connections won&#39;t have this field. Can be either &#39;standard&#39; or &#39;tunnel&#39;.   The default mode of a dedicated connection is &#39;standard&#39;. The mode can only be changed when there are no associated virtual circuits on the connection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    STANDARD("standard"),
    
    TUNNEL("tunnel");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mode")
  private ModeEnum mode = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("project")
  private String project = null;

  @SerializedName("redundancy")
  private String redundancy = null;

  /**
   * Can only be set to &#39;a_side&#39; to create a shared connection with an A-side Fabric service token. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.
   */
  @JsonAdapter(ServiceTokenTypeEnum.Adapter.class)
  public enum ServiceTokenTypeEnum {
    A_SIDE("a_side");

    private String value;

    ServiceTokenTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTokenTypeEnum fromValue(String text) {
      for (ServiceTokenTypeEnum b : ServiceTokenTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ServiceTokenTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTokenTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTokenTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceTokenTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("service_token_type")
  private ServiceTokenTypeEnum serviceTokenType = null;

  @SerializedName("speed")
  private String speed = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("vlans")
  private List<Integer> vlans = null;

  public Body34 tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Body34 addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(value = "")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public Body34 contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

   /**
   * Get contactEmail
   * @return contactEmail
  **/
  @ApiModelProperty(value = "")
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }

  public Body34 description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Body34 metro(String metro) {
    this.metro = metro;
    return this;
  }

   /**
   * A Metro ID or code.
   * @return metro
  **/
  @ApiModelProperty(required = true, value = "A Metro ID or code.")
  public String getMetro() {
    return metro;
  }

  public void setMetro(String metro) {
    this.metro = metro;
  }

  public Body34 mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * The mode of the connection (only relevant to dedicated connections). Shared connections won&#39;t have this field. Can be either &#39;standard&#39; or &#39;tunnel&#39;.   The default mode of a dedicated connection is &#39;standard&#39;. The mode can only be changed when there are no associated virtual circuits on the connection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.
   * @return mode
  **/
  @ApiModelProperty(example = "standard", value = "The mode of the connection (only relevant to dedicated connections). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of a dedicated connection is 'standard'. The mode can only be changed when there are no associated virtual circuits on the connection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public Body34 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Body34 project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @ApiModelProperty(value = "")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public Body34 redundancy(String redundancy) {
    this.redundancy = redundancy;
    return this;
  }

   /**
   * Either &#39;primary&#39; or &#39;redundant&#39;.
   * @return redundancy
  **/
  @ApiModelProperty(required = true, value = "Either 'primary' or 'redundant'.")
  public String getRedundancy() {
    return redundancy;
  }

  public void setRedundancy(String redundancy) {
    this.redundancy = redundancy;
  }

  public Body34 serviceTokenType(ServiceTokenTypeEnum serviceTokenType) {
    this.serviceTokenType = serviceTokenType;
    return this;
  }

   /**
   * Can only be set to &#39;a_side&#39; to create a shared connection with an A-side Fabric service token. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.
   * @return serviceTokenType
  **/
  @ApiModelProperty(example = "a_side", value = "Can only be set to 'a_side' to create a shared connection with an A-side Fabric service token. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.")
  public ServiceTokenTypeEnum getServiceTokenType() {
    return serviceTokenType;
  }

  public void setServiceTokenType(ServiceTokenTypeEnum serviceTokenType) {
    this.serviceTokenType = serviceTokenType;
  }

  public Body34 speed(String speed) {
    this.speed = speed;
    return this;
  }

   /**
   * A connection speed, in bps, mbps, or gbps. Ex: &#39;100000000&#39; or &#39;100 mbps&#39;.
   * @return speed
  **/
  @ApiModelProperty(value = "A connection speed, in bps, mbps, or gbps. Ex: '100000000' or '100 mbps'.")
  public String getSpeed() {
    return speed;
  }

  public void setSpeed(String speed) {
    this.speed = speed;
  }

  public Body34 type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Either &#39;shared&#39; or &#39;dedicated&#39;.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Either 'shared' or 'dedicated'.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Body34 vlans(List<Integer> vlans) {
    this.vlans = vlans;
    return this;
  }

  public Body34 addVlansItem(Integer vlansItem) {
    if (this.vlans == null) {
      this.vlans = new ArrayList<Integer>();
    }
    this.vlans.add(vlansItem);
    return this;
  }

   /**
   * A list of one or two metro-based VLANs that will be set on the primary and/or secondary (if redundant) virtual circuits respectively when creating a shared connection. VLANs can also be set after the connection is created, but are required to activate the connection. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.
   * @return vlans
  **/
  @ApiModelProperty(example = "[1000,1001]", value = "A list of one or two metro-based VLANs that will be set on the primary and/or secondary (if redundant) virtual circuits respectively when creating a shared connection. VLANs can also be set after the connection is created, but are required to activate the connection. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.")
  public List<Integer> getVlans() {
    return vlans;
  }

  public void setVlans(List<Integer> vlans) {
    this.vlans = vlans;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body34 body34 = (Body34) o;
    return Objects.equals(this.tags, body34.tags) &&
        Objects.equals(this.contactEmail, body34.contactEmail) &&
        Objects.equals(this.description, body34.description) &&
        Objects.equals(this.metro, body34.metro) &&
        Objects.equals(this.mode, body34.mode) &&
        Objects.equals(this.name, body34.name) &&
        Objects.equals(this.project, body34.project) &&
        Objects.equals(this.redundancy, body34.redundancy) &&
        Objects.equals(this.serviceTokenType, body34.serviceTokenType) &&
        Objects.equals(this.speed, body34.speed) &&
        Objects.equals(this.type, body34.type) &&
        Objects.equals(this.vlans, body34.vlans);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, contactEmail, description, metro, mode, name, project, redundancy, serviceTokenType, speed, type, vlans);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body34 {\n");
    
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metro: ").append(toIndentedString(metro)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    redundancy: ").append(toIndentedString(redundancy)).append("\n");
    sb.append("    serviceTokenType: ").append(toIndentedString(serviceTokenType)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vlans: ").append(toIndentedString(vlans)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

