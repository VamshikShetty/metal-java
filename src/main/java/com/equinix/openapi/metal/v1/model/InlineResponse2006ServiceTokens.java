/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;

/**
 * InlineResponse2006ServiceTokens
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-07-20T13:48:24.543Z")
public class InlineResponse2006ServiceTokens {
  @SerializedName("expires_at")
  private OffsetDateTime expiresAt = null;

  @SerializedName("id")
  private UUID id = null;

  @SerializedName("max_allowed_speed")
  private String maxAllowedSpeed = null;

  /**
   * Either primary or redundant, depending on the role of the connection port the token is associated with.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    PRIMARY("primary"),
    
    REDUNDANT("redundant");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String text) {
      for (RoleEnum b : RoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RoleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("role")
  private RoleEnum role = null;

  /**
   * The type of service token that has been created. Currently, only A-side service tokens are available.
   */
  @JsonAdapter(ServiceTokenTypeEnum.Adapter.class)
  public enum ServiceTokenTypeEnum {
    A_SIDE("a_side");

    private String value;

    ServiceTokenTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceTokenTypeEnum fromValue(String text) {
      for (ServiceTokenTypeEnum b : ServiceTokenTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ServiceTokenTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceTokenTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceTokenTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ServiceTokenTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("service_token_type")
  private ServiceTokenTypeEnum serviceTokenType = null;

  /**
   * The state of the service token that corresponds with the service token state on Fabric. An inactive state refers to a token that has not been redeemed yet on the Fabric side, an active state refers to a token that has already been redeemed, and an expired state refers to a token that has reached its expiry time.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    INACTIVE("inactive"),
    
    ACTIVE("active"),
    
    EXPIRED("expired");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  public InlineResponse2006ServiceTokens expiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * The expiration date and time of the Fabric service token. Once a service token is expired, it is no longer redeemable.
   * @return expiresAt
  **/
  @ApiModelProperty(value = "The expiration date and time of the Fabric service token. Once a service token is expired, it is no longer redeemable.")
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }

  public InlineResponse2006ServiceTokens id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * The service token UUID that can be used on the Fabric Portal to create an connection from Metal to another Fabric service provider.
   * @return id
  **/
  @ApiModelProperty(value = "The service token UUID that can be used on the Fabric Portal to create an connection from Metal to another Fabric service provider.")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public InlineResponse2006ServiceTokens maxAllowedSpeed(String maxAllowedSpeed) {
    this.maxAllowedSpeed = maxAllowedSpeed;
    return this;
  }

   /**
   * The maximum speed that can be selected on the Fabric Portal when configuring a connection with the service token. The speed is recorded in bps, but can be set by using any of the following units: &#39;bps&#39;, &#39;mbps&#39;, or &#39;gbps&#39;. This speed is automatically capped depending on the tier of the organization. If you would like to upgrade to another tier, please contact our Support team.
   * @return maxAllowedSpeed
  **/
  @ApiModelProperty(example = "'200000000' or '200mbps'", value = "The maximum speed that can be selected on the Fabric Portal when configuring a connection with the service token. The speed is recorded in bps, but can be set by using any of the following units: 'bps', 'mbps', or 'gbps'. This speed is automatically capped depending on the tier of the organization. If you would like to upgrade to another tier, please contact our Support team.")
  public String getMaxAllowedSpeed() {
    return maxAllowedSpeed;
  }

  public void setMaxAllowedSpeed(String maxAllowedSpeed) {
    this.maxAllowedSpeed = maxAllowedSpeed;
  }

  public InlineResponse2006ServiceTokens role(RoleEnum role) {
    this.role = role;
    return this;
  }

   /**
   * Either primary or redundant, depending on the role of the connection port the token is associated with.
   * @return role
  **/
  @ApiModelProperty(value = "Either primary or redundant, depending on the role of the connection port the token is associated with.")
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }

  public InlineResponse2006ServiceTokens serviceTokenType(ServiceTokenTypeEnum serviceTokenType) {
    this.serviceTokenType = serviceTokenType;
    return this;
  }

   /**
   * The type of service token that has been created. Currently, only A-side service tokens are available.
   * @return serviceTokenType
  **/
  @ApiModelProperty(value = "The type of service token that has been created. Currently, only A-side service tokens are available.")
  public ServiceTokenTypeEnum getServiceTokenType() {
    return serviceTokenType;
  }

  public void setServiceTokenType(ServiceTokenTypeEnum serviceTokenType) {
    this.serviceTokenType = serviceTokenType;
  }

  public InlineResponse2006ServiceTokens state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the service token that corresponds with the service token state on Fabric. An inactive state refers to a token that has not been redeemed yet on the Fabric side, an active state refers to a token that has already been redeemed, and an expired state refers to a token that has reached its expiry time.
   * @return state
  **/
  @ApiModelProperty(value = "The state of the service token that corresponds with the service token state on Fabric. An inactive state refers to a token that has not been redeemed yet on the Fabric side, an active state refers to a token that has already been redeemed, and an expired state refers to a token that has reached its expiry time.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2006ServiceTokens inlineResponse2006ServiceTokens = (InlineResponse2006ServiceTokens) o;
    return Objects.equals(this.expiresAt, inlineResponse2006ServiceTokens.expiresAt) &&
        Objects.equals(this.id, inlineResponse2006ServiceTokens.id) &&
        Objects.equals(this.maxAllowedSpeed, inlineResponse2006ServiceTokens.maxAllowedSpeed) &&
        Objects.equals(this.role, inlineResponse2006ServiceTokens.role) &&
        Objects.equals(this.serviceTokenType, inlineResponse2006ServiceTokens.serviceTokenType) &&
        Objects.equals(this.state, inlineResponse2006ServiceTokens.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiresAt, id, maxAllowedSpeed, role, serviceTokenType, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2006ServiceTokens {\n");
    
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    maxAllowedSpeed: ").append(toIndentedString(maxAllowedSpeed)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    serviceTokenType: ").append(toIndentedString(serviceTokenType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

