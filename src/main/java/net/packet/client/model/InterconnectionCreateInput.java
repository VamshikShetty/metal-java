/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InterconnectionCreateInput
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-12-14T20:42:56.777Z")
public class InterconnectionCreateInput {
  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("facility")
  private String facility = null;

  @SerializedName("metro")
  private String metro = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("redundancy")
  private String redundancy = null;

  @SerializedName("contact_email")
  private String contactEmail = null;

  @SerializedName("project")
  private String project = null;

  @SerializedName("speed")
  private String speed = null;

  @SerializedName("tags")
  private List<String> tags = null;

  /**
   * The mode of the connection (only relevant to dedicated connections). Shared connections won&#39;t have this field. Can be either &#39;standard&#39; or &#39;tunnel&#39;.   The default mode of a dedicated connection is &#39;standard&#39;. The mode can only be changed when there are no associated virtual circuits on the connection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    STANDARD("standard"),
    
    TUNNEL("tunnel");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mode")
  private ModeEnum mode = null;

  public InterconnectionCreateInput name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InterconnectionCreateInput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public InterconnectionCreateInput facility(String facility) {
    this.facility = facility;
    return this;
  }

   /**
   * A Facility ID or code.
   * @return facility
  **/
  @ApiModelProperty(required = true, value = "A Facility ID or code.")
  public String getFacility() {
    return facility;
  }

  public void setFacility(String facility) {
    this.facility = facility;
  }

  public InterconnectionCreateInput metro(String metro) {
    this.metro = metro;
    return this;
  }

   /**
   * A Metro ID or code. Required for creating a connection, unless creating with facility.
   * @return metro
  **/
  @ApiModelProperty(value = "A Metro ID or code. Required for creating a connection, unless creating with facility.")
  public String getMetro() {
    return metro;
  }

  public void setMetro(String metro) {
    this.metro = metro;
  }

  public InterconnectionCreateInput type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Either &#39;shared&#39; or &#39;dedicated&#39;.
   * @return type
  **/
  @ApiModelProperty(required = true, value = "Either 'shared' or 'dedicated'.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public InterconnectionCreateInput redundancy(String redundancy) {
    this.redundancy = redundancy;
    return this;
  }

   /**
   * Either &#39;primary&#39; or &#39;redundant&#39;.
   * @return redundancy
  **/
  @ApiModelProperty(required = true, value = "Either 'primary' or 'redundant'.")
  public String getRedundancy() {
    return redundancy;
  }

  public void setRedundancy(String redundancy) {
    this.redundancy = redundancy;
  }

  public InterconnectionCreateInput contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

   /**
   * Get contactEmail
   * @return contactEmail
  **/
  @ApiModelProperty(value = "")
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }

  public InterconnectionCreateInput project(String project) {
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @ApiModelProperty(value = "")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

  public InterconnectionCreateInput speed(String speed) {
    this.speed = speed;
    return this;
  }

   /**
   * A connection speed, in bps, mbps, or gbps. Ex: &#39;100000000&#39; or &#39;100 mbps&#39;.
   * @return speed
  **/
  @ApiModelProperty(value = "A connection speed, in bps, mbps, or gbps. Ex: '100000000' or '100 mbps'.")
  public String getSpeed() {
    return speed;
  }

  public void setSpeed(String speed) {
    this.speed = speed;
  }

  public InterconnectionCreateInput tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public InterconnectionCreateInput addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(value = "")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public InterconnectionCreateInput mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * The mode of the connection (only relevant to dedicated connections). Shared connections won&#39;t have this field. Can be either &#39;standard&#39; or &#39;tunnel&#39;.   The default mode of a dedicated connection is &#39;standard&#39;. The mode can only be changed when there are no associated virtual circuits on the connection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.
   * @return mode
  **/
  @ApiModelProperty(example = "standard", value = "The mode of the connection (only relevant to dedicated connections). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of a dedicated connection is 'standard'. The mode can only be changed when there are no associated virtual circuits on the connection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InterconnectionCreateInput interconnectionCreateInput = (InterconnectionCreateInput) o;
    return Objects.equals(this.name, interconnectionCreateInput.name) &&
        Objects.equals(this.description, interconnectionCreateInput.description) &&
        Objects.equals(this.facility, interconnectionCreateInput.facility) &&
        Objects.equals(this.metro, interconnectionCreateInput.metro) &&
        Objects.equals(this.type, interconnectionCreateInput.type) &&
        Objects.equals(this.redundancy, interconnectionCreateInput.redundancy) &&
        Objects.equals(this.contactEmail, interconnectionCreateInput.contactEmail) &&
        Objects.equals(this.project, interconnectionCreateInput.project) &&
        Objects.equals(this.speed, interconnectionCreateInput.speed) &&
        Objects.equals(this.tags, interconnectionCreateInput.tags) &&
        Objects.equals(this.mode, interconnectionCreateInput.mode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, facility, metro, type, redundancy, contactEmail, project, speed, tags, mode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InterconnectionCreateInput {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    metro: ").append(toIndentedString(metro)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    redundancy: ").append(toIndentedString(redundancy)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

