/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import net.packet.client.model.DeviceCreateInputIpAddresses;
import net.packet.client.model.SSHKeyInput;
import org.threeten.bp.OffsetDateTime;

/**
 * DeviceCreateInput
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-12-14T20:42:56.777Z")
public class DeviceCreateInput {
  @SerializedName("facility")
  private String facility = null;

  @SerializedName("plan")
  private String plan = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("description")
  private String description = null;

  /**
   * The billing cycle of the device.
   */
  @JsonAdapter(BillingCycleEnum.Adapter.class)
  public enum BillingCycleEnum {
    HOURLY("hourly"),
    
    DAILY("daily"),
    
    MONTHLY("monthly"),
    
    YEARLY("yearly");

    private String value;

    BillingCycleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingCycleEnum fromValue(String text) {
      for (BillingCycleEnum b : BillingCycleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BillingCycleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingCycleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingCycleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BillingCycleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("billing_cycle")
  private BillingCycleEnum billingCycle = null;

  @SerializedName("operating_system")
  private String operatingSystem = null;

  @SerializedName("always_pxe")
  private Boolean alwaysPxe = false;

  @SerializedName("ipxe_script_url")
  private String ipxeScriptUrl = null;

  @SerializedName("userdata")
  private String userdata = null;

  @SerializedName("locked")
  private Boolean locked = false;

  @SerializedName("customdata")
  private Object customdata = null;

  @SerializedName("metro")
  private String metro = null;

  @SerializedName("hardware_reservation_id")
  private String hardwareReservationId = "";

  @SerializedName("spot_instance")
  private Boolean spotInstance = null;

  @SerializedName("spot_price_max")
  private Float spotPriceMax = null;

  @SerializedName("termination_time")
  private OffsetDateTime terminationTime = null;

  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("project_ssh_keys")
  private List<UUID> projectSshKeys = null;

  @SerializedName("user_ssh_keys")
  private List<UUID> userSshKeys = null;

  @SerializedName("ssh_keys")
  private List<SSHKeyInput> sshKeys = null;

  @SerializedName("no_ssh_keys")
  private Boolean noSshKeys = false;

  @SerializedName("features")
  private List<String> features = null;

  @SerializedName("public_ipv4_subnet_size")
  private BigDecimal publicIpv4SubnetSize = null;

  @SerializedName("private_ipv4_subnet_size")
  private BigDecimal privateIpv4SubnetSize = null;

  @SerializedName("ip_addresses")
  private List<DeviceCreateInputIpAddresses> ipAddresses = null;

  public DeviceCreateInput facility(String facility) {
    this.facility = facility;
    return this;
  }

   /**
   * The datacenter where the device should be created.  The API will accept either a single facility &#x60;{ \&quot;facility\&quot;: \&quot;f1\&quot; }&#x60;, or it can be instructed to create the device in the best available datacenter &#x60;{ \&quot;facility\&quot;: \&quot;any\&quot; }&#x60;.  Additionally it is possible to set a prioritized location selection. For example &#x60;{ \&quot;facility\&quot;: [\&quot;f3\&quot;, \&quot;f2\&quot;, \&quot;any\&quot;] }&#x60; can be used to prioritize &#x60;f3&#x60; and then &#x60;f2&#x60; before accepting &#x60;any&#x60; facility. If none of the facilities provided have availability for the requested device the request will fail.
   * @return facility
  **/
  @ApiModelProperty(required = true, value = "The datacenter where the device should be created.  The API will accept either a single facility `{ \"facility\": \"f1\" }`, or it can be instructed to create the device in the best available datacenter `{ \"facility\": \"any\" }`.  Additionally it is possible to set a prioritized location selection. For example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` can be used to prioritize `f3` and then `f2` before accepting `any` facility. If none of the facilities provided have availability for the requested device the request will fail.")
  public String getFacility() {
    return facility;
  }

  public void setFacility(String facility) {
    this.facility = facility;
  }

  public DeviceCreateInput plan(String plan) {
    this.plan = plan;
    return this;
  }

   /**
   * The slug of the device plan to provision.
   * @return plan
  **/
  @ApiModelProperty(required = true, value = "The slug of the device plan to provision.")
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }

  public DeviceCreateInput hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

   /**
   * The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.
   * @return hostname
  **/
  @ApiModelProperty(value = "The hostname to use within the operating system. The same hostname may be used on multiple devices within a project.")
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }

  public DeviceCreateInput description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Any description of the device or how it will be used. This may be used to inform other API consumers with project access.
   * @return description
  **/
  @ApiModelProperty(value = "Any description of the device or how it will be used. This may be used to inform other API consumers with project access.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DeviceCreateInput billingCycle(BillingCycleEnum billingCycle) {
    this.billingCycle = billingCycle;
    return this;
  }

   /**
   * The billing cycle of the device.
   * @return billingCycle
  **/
  @ApiModelProperty(value = "The billing cycle of the device.")
  public BillingCycleEnum getBillingCycle() {
    return billingCycle;
  }

  public void setBillingCycle(BillingCycleEnum billingCycle) {
    this.billingCycle = billingCycle;
  }

  public DeviceCreateInput operatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

   /**
   * The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.
   * @return operatingSystem
  **/
  @ApiModelProperty(required = true, value = "The slug of the operating system to provision. Check the Equinix Metal operating system documentation for rules that may be imposed per operating system, including restrictions on IP address options and device plans.")
  public String getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }

  public DeviceCreateInput alwaysPxe(Boolean alwaysPxe) {
    this.alwaysPxe = alwaysPxe;
    return this;
  }

   /**
   * When true, devices with a &#x60;custom_ipxe&#x60; OS will always boot to iPXE. The default setting of false ensures that iPXE will be used on only the first boot.
   * @return alwaysPxe
  **/
  @ApiModelProperty(value = "When true, devices with a `custom_ipxe` OS will always boot to iPXE. The default setting of false ensures that iPXE will be used on only the first boot.")
  public Boolean isAlwaysPxe() {
    return alwaysPxe;
  }

  public void setAlwaysPxe(Boolean alwaysPxe) {
    this.alwaysPxe = alwaysPxe;
  }

  public DeviceCreateInput ipxeScriptUrl(String ipxeScriptUrl) {
    this.ipxeScriptUrl = ipxeScriptUrl;
    return this;
  }

   /**
   * When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.        See [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.
   * @return ipxeScriptUrl
  **/
  @ApiModelProperty(value = "When set, the device will chainload an iPXE Script at boot fetched from the supplied URL.        See [Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/) for more details.")
  public String getIpxeScriptUrl() {
    return ipxeScriptUrl;
  }

  public void setIpxeScriptUrl(String ipxeScriptUrl) {
    this.ipxeScriptUrl = ipxeScriptUrl;
  }

  public DeviceCreateInput userdata(String userdata) {
    this.userdata = userdata;
    return this;
  }

   /**
   * The userdata presented in the metadata service for this device.  Userdata is fetched and interpretted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.        See [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.
   * @return userdata
  **/
  @ApiModelProperty(value = "The userdata presented in the metadata service for this device.  Userdata is fetched and interpretted by the operating system installed on the device. Acceptable formats are determined by the operating system, with the exception of a special iPXE enabling syntax which is handled before the operating system starts.        See [Server User Data](https://metal.equinix.com/developers/docs/servers/user-data/) and [Provisioning with Custom iPXE](https://metal.equinix.com/developers/docs/operating-systems/custom-ipxe/#provisioning-with-custom-ipxe) for more details.")
  public String getUserdata() {
    return userdata;
  }

  public void setUserdata(String userdata) {
    this.userdata = userdata;
  }

  public DeviceCreateInput locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

   /**
   * Whether the device should be locked, preventing accidental deletion.
   * @return locked
  **/
  @ApiModelProperty(value = "Whether the device should be locked, preventing accidental deletion.")
  public Boolean isLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }

  public DeviceCreateInput customdata(Object customdata) {
    this.customdata = customdata;
    return this;
  }

   /**
   * Customdata is an arbitrary JSON value that can be accessed via the metadata service.
   * @return customdata
  **/
  @ApiModelProperty(value = "Customdata is an arbitrary JSON value that can be accessed via the metadata service.")
  public Object getCustomdata() {
    return customdata;
  }

  public void setCustomdata(Object customdata) {
    this.customdata = customdata;
  }

  public DeviceCreateInput metro(String metro) {
    this.metro = metro;
    return this;
  }

   /**
   * Metro code or ID of where the instance should be provisioned in.
   * @return metro
  **/
  @ApiModelProperty(value = "Metro code or ID of where the instance should be provisioned in.")
  public String getMetro() {
    return metro;
  }

  public void setMetro(String metro) {
    this.metro = metro;
  }

  public DeviceCreateInput hardwareReservationId(String hardwareReservationId) {
    this.hardwareReservationId = hardwareReservationId;
    return this;
  }

   /**
   * The Hardware Reservation UUID to provision. Alternatively, &#x60;next-available&#x60; can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.        See [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.
   * @return hardwareReservationId
  **/
  @ApiModelProperty(example = "next-available", value = "The Hardware Reservation UUID to provision. Alternatively, `next-available` can be specified to select from any of the available hardware reservations. An error will be returned if the requested reservation option is not available.        See [Reserved Hardware](https://metal.equinix.com/developers/docs/deploy/reserved/) for more details.")
  public String getHardwareReservationId() {
    return hardwareReservationId;
  }

  public void setHardwareReservationId(String hardwareReservationId) {
    this.hardwareReservationId = hardwareReservationId;
  }

  public DeviceCreateInput spotInstance(Boolean spotInstance) {
    this.spotInstance = spotInstance;
    return this;
  }

   /**
   * Get spotInstance
   * @return spotInstance
  **/
  @ApiModelProperty(value = "")
  public Boolean isSpotInstance() {
    return spotInstance;
  }

  public void setSpotInstance(Boolean spotInstance) {
    this.spotInstance = spotInstance;
  }

  public DeviceCreateInput spotPriceMax(Float spotPriceMax) {
    this.spotPriceMax = spotPriceMax;
    return this;
  }

   /**
   * Get spotPriceMax
   * @return spotPriceMax
  **/
  @ApiModelProperty(value = "")
  public Float getSpotPriceMax() {
    return spotPriceMax;
  }

  public void setSpotPriceMax(Float spotPriceMax) {
    this.spotPriceMax = spotPriceMax;
  }

  public DeviceCreateInput terminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
    return this;
  }

   /**
   * Get terminationTime
   * @return terminationTime
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTerminationTime() {
    return terminationTime;
  }

  public void setTerminationTime(OffsetDateTime terminationTime) {
    this.terminationTime = terminationTime;
  }

  public DeviceCreateInput tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DeviceCreateInput addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(value = "")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }

  public DeviceCreateInput projectSshKeys(List<UUID> projectSshKeys) {
    this.projectSshKeys = projectSshKeys;
    return this;
  }

  public DeviceCreateInput addProjectSshKeysItem(UUID projectSshKeysItem) {
    if (this.projectSshKeys == null) {
      this.projectSshKeys = new ArrayList<UUID>();
    }
    this.projectSshKeys.add(projectSshKeysItem);
    return this;
  }

   /**
   * A list of UUIDs identifying the device parent project that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  If no SSH keys are specified (&#x60;user_ssh_keys&#x60;, &#x60;project_ssh_keys&#x60;, and &#x60;ssh_keys&#x60; are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with &#39;no_ssh_keys&#39; option to omit any SSH key being added.  
   * @return projectSshKeys
  **/
  @ApiModelProperty(value = "A list of UUIDs identifying the device parent project that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added.  ")
  public List<UUID> getProjectSshKeys() {
    return projectSshKeys;
  }

  public void setProjectSshKeys(List<UUID> projectSshKeys) {
    this.projectSshKeys = projectSshKeys;
  }

  public DeviceCreateInput userSshKeys(List<UUID> userSshKeys) {
    this.userSshKeys = userSshKeys;
    return this;
  }

  public DeviceCreateInput addUserSshKeysItem(UUID userSshKeysItem) {
    if (this.userSshKeys == null) {
      this.userSshKeys = new ArrayList<UUID>();
    }
    this.userSshKeys.add(userSshKeysItem);
    return this;
  }

   /**
   * A list of UUIDs identifying the users that should be authorized to access this device (typically via /root/.ssh/authorized_keys).  These keys will also appear in the device metadata.  The users must be members of the project or organization.  If no SSH keys are specified (&#x60;user_ssh_keys&#x60;, &#x60;project_ssh_keys&#x60;, and &#x60;ssh_keys&#x60; are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with &#39;no_ssh_keys&#39; option to omit any SSH key being added. 
   * @return userSshKeys
  **/
  @ApiModelProperty(value = "A list of UUIDs identifying the users that should be authorized to access this device (typically via /root/.ssh/authorized_keys).  These keys will also appear in the device metadata.  The users must be members of the project or organization.  If no SSH keys are specified (`user_ssh_keys`, `project_ssh_keys`, and `ssh_keys` are all empty lists or omitted), all parent project keys, parent project members keys and organization members keys will be included. This behaviour can be changed with 'no_ssh_keys' option to omit any SSH key being added. ")
  public List<UUID> getUserSshKeys() {
    return userSshKeys;
  }

  public void setUserSshKeys(List<UUID> userSshKeys) {
    this.userSshKeys = userSshKeys;
  }

  public DeviceCreateInput sshKeys(List<SSHKeyInput> sshKeys) {
    this.sshKeys = sshKeys;
    return this;
  }

  public DeviceCreateInput addSshKeysItem(SSHKeyInput sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<SSHKeyInput>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

   /**
   * A list of new or existing project ssh_keys that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  These keys are added in addition to any keys defined by   &#x60;project_ssh_keys&#x60; and &#x60;user_ssh_keys&#x60;. 
   * @return sshKeys
  **/
  @ApiModelProperty(value = "A list of new or existing project ssh_keys that should be authorized to access this device (typically via /root/.ssh/authorized_keys). These keys will also appear in the device metadata.  These keys are added in addition to any keys defined by   `project_ssh_keys` and `user_ssh_keys`. ")
  public List<SSHKeyInput> getSshKeys() {
    return sshKeys;
  }

  public void setSshKeys(List<SSHKeyInput> sshKeys) {
    this.sshKeys = sshKeys;
  }

  public DeviceCreateInput noSshKeys(Boolean noSshKeys) {
    this.noSshKeys = noSshKeys;
    return this;
  }

   /**
   * Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified
   * @return noSshKeys
  **/
  @ApiModelProperty(value = "Overrides default behaviour of attaching all of the organization members ssh keys and project ssh keys to device if no specific keys specified")
  public Boolean isNoSshKeys() {
    return noSshKeys;
  }

  public void setNoSshKeys(Boolean noSshKeys) {
    this.noSshKeys = noSshKeys;
  }

  public DeviceCreateInput features(List<String> features) {
    this.features = features;
    return this;
  }

  public DeviceCreateInput addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<String>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * The features attribute allows you to optionally specify what features your server should have.  In the API shorthand syntax, all features listed are &#x60;required&#x60;:  &#x60;&#x60;&#x60; { \&quot;features\&quot;: [\&quot;tpm\&quot;] } &#x60;&#x60;&#x60;  Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a &#x60;preferred&#x60; value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:  &#x60;&#x60;&#x60; { \&quot;features\&quot;: { \&quot;tpm\&quot;: \&quot;required\&quot;, \&quot;raid\&quot;: \&quot;preferred\&quot; } } &#x60;&#x60;&#x60;  The request will only fail if there are no available servers matching the required &#x60;tpm&#x60; criteria.
   * @return features
  **/
  @ApiModelProperty(value = "The features attribute allows you to optionally specify what features your server should have.  In the API shorthand syntax, all features listed are `required`:  ``` { \"features\": [\"tpm\"] } ```  Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a `preferred` value. The request will not fail if we have no servers with that feature in our inventory. The API offers an alternative syntax for mixing preferred and required features:  ``` { \"features\": { \"tpm\": \"required\", \"raid\": \"preferred\" } } ```  The request will only fail if there are no available servers matching the required `tpm` criteria.")
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(List<String> features) {
    this.features = features;
  }

  public DeviceCreateInput publicIpv4SubnetSize(BigDecimal publicIpv4SubnetSize) {
    this.publicIpv4SubnetSize = publicIpv4SubnetSize;
    return this;
  }

   /**
   * Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.
   * @return publicIpv4SubnetSize
  **/
  @ApiModelProperty(value = "Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device. Your project must have addresses available for a non-default request.")
  public BigDecimal getPublicIpv4SubnetSize() {
    return publicIpv4SubnetSize;
  }

  public void setPublicIpv4SubnetSize(BigDecimal publicIpv4SubnetSize) {
    this.publicIpv4SubnetSize = publicIpv4SubnetSize;
  }

  public DeviceCreateInput privateIpv4SubnetSize(BigDecimal privateIpv4SubnetSize) {
    this.privateIpv4SubnetSize = privateIpv4SubnetSize;
    return this;
  }

   /**
   * Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.
   * @return privateIpv4SubnetSize
  **/
  @ApiModelProperty(value = "Deprecated. Use ip_addresses. Subnet range for addresses allocated to this device.")
  public BigDecimal getPrivateIpv4SubnetSize() {
    return privateIpv4SubnetSize;
  }

  public void setPrivateIpv4SubnetSize(BigDecimal privateIpv4SubnetSize) {
    this.privateIpv4SubnetSize = privateIpv4SubnetSize;
  }

  public DeviceCreateInput ipAddresses(List<DeviceCreateInputIpAddresses> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public DeviceCreateInput addIpAddressesItem(DeviceCreateInputIpAddresses ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<DeviceCreateInputIpAddresses>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

   /**
   * The &#x60;ip_addresses attribute will allow you to specify the addresses you want created with your device.  The default value configures public IPv4, public IPv6, and private IPv4.  Private IPv4 address is required. When specifying &#x60;ip_addresses&#x60;, one of the array items must enable private IPv4.  Some operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.  For example, to only configure your server with a private IPv4 address, you can send &#x60;{ \&quot;ip_addresses\&quot;: [{ \&quot;address_family\&quot;: 4, \&quot;public\&quot;: false }] }&#x60;.  It is possible to request a subnet size larger than a &#x60;/30&#x60; by assigning addresses using the UUID(s) of ip_reservations in your project.  For example, &#x60;{ \&quot;ip_addresses\&quot;: [..., {\&quot;address_family\&quot;: 4, \&quot;public\&quot;: true, \&quot;ip_reservations\&quot;: [\&quot;uuid1\&quot;, \&quot;uuid2\&quot;]}] }&#x60;  To access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.
   * @return ipAddresses
  **/
  @ApiModelProperty(value = "The `ip_addresses attribute will allow you to specify the addresses you want created with your device.  The default value configures public IPv4, public IPv6, and private IPv4.  Private IPv4 address is required. When specifying `ip_addresses`, one of the array items must enable private IPv4.  Some operating systems require public IPv4 address. In those cases you will receive an error message if public IPv4 is not enabled.  For example, to only configure your server with a private IPv4 address, you can send `{ \"ip_addresses\": [{ \"address_family\": 4, \"public\": false }] }`.  It is possible to request a subnet size larger than a `/30` by assigning addresses using the UUID(s) of ip_reservations in your project.  For example, `{ \"ip_addresses\": [..., {\"address_family\": 4, \"public\": true, \"ip_reservations\": [\"uuid1\", \"uuid2\"]}] }`  To access a server without public IPs, you can use our Out-of-Band console access (SOS) or proxy through another server in the project with public IPs enabled.")
  public List<DeviceCreateInputIpAddresses> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(List<DeviceCreateInputIpAddresses> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceCreateInput deviceCreateInput = (DeviceCreateInput) o;
    return Objects.equals(this.facility, deviceCreateInput.facility) &&
        Objects.equals(this.plan, deviceCreateInput.plan) &&
        Objects.equals(this.hostname, deviceCreateInput.hostname) &&
        Objects.equals(this.description, deviceCreateInput.description) &&
        Objects.equals(this.billingCycle, deviceCreateInput.billingCycle) &&
        Objects.equals(this.operatingSystem, deviceCreateInput.operatingSystem) &&
        Objects.equals(this.alwaysPxe, deviceCreateInput.alwaysPxe) &&
        Objects.equals(this.ipxeScriptUrl, deviceCreateInput.ipxeScriptUrl) &&
        Objects.equals(this.userdata, deviceCreateInput.userdata) &&
        Objects.equals(this.locked, deviceCreateInput.locked) &&
        Objects.equals(this.customdata, deviceCreateInput.customdata) &&
        Objects.equals(this.metro, deviceCreateInput.metro) &&
        Objects.equals(this.hardwareReservationId, deviceCreateInput.hardwareReservationId) &&
        Objects.equals(this.spotInstance, deviceCreateInput.spotInstance) &&
        Objects.equals(this.spotPriceMax, deviceCreateInput.spotPriceMax) &&
        Objects.equals(this.terminationTime, deviceCreateInput.terminationTime) &&
        Objects.equals(this.tags, deviceCreateInput.tags) &&
        Objects.equals(this.projectSshKeys, deviceCreateInput.projectSshKeys) &&
        Objects.equals(this.userSshKeys, deviceCreateInput.userSshKeys) &&
        Objects.equals(this.sshKeys, deviceCreateInput.sshKeys) &&
        Objects.equals(this.noSshKeys, deviceCreateInput.noSshKeys) &&
        Objects.equals(this.features, deviceCreateInput.features) &&
        Objects.equals(this.publicIpv4SubnetSize, deviceCreateInput.publicIpv4SubnetSize) &&
        Objects.equals(this.privateIpv4SubnetSize, deviceCreateInput.privateIpv4SubnetSize) &&
        Objects.equals(this.ipAddresses, deviceCreateInput.ipAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(facility, plan, hostname, description, billingCycle, operatingSystem, alwaysPxe, ipxeScriptUrl, userdata, locked, customdata, metro, hardwareReservationId, spotInstance, spotPriceMax, terminationTime, tags, projectSshKeys, userSshKeys, sshKeys, noSshKeys, features, publicIpv4SubnetSize, privateIpv4SubnetSize, ipAddresses);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceCreateInput {\n");
    
    sb.append("    facility: ").append(toIndentedString(facility)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    billingCycle: ").append(toIndentedString(billingCycle)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    alwaysPxe: ").append(toIndentedString(alwaysPxe)).append("\n");
    sb.append("    ipxeScriptUrl: ").append(toIndentedString(ipxeScriptUrl)).append("\n");
    sb.append("    userdata: ").append(toIndentedString(userdata)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    customdata: ").append(toIndentedString(customdata)).append("\n");
    sb.append("    metro: ").append(toIndentedString(metro)).append("\n");
    sb.append("    hardwareReservationId: ").append(toIndentedString(hardwareReservationId)).append("\n");
    sb.append("    spotInstance: ").append(toIndentedString(spotInstance)).append("\n");
    sb.append("    spotPriceMax: ").append(toIndentedString(spotPriceMax)).append("\n");
    sb.append("    terminationTime: ").append(toIndentedString(terminationTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    projectSshKeys: ").append(toIndentedString(projectSshKeys)).append("\n");
    sb.append("    userSshKeys: ").append(toIndentedString(userSshKeys)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    noSshKeys: ").append(toIndentedString(noSshKeys)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    publicIpv4SubnetSize: ").append(toIndentedString(publicIpv4SubnetSize)).append("\n");
    sb.append("    privateIpv4SubnetSize: ").append(toIndentedString(privateIpv4SubnetSize)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

