/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.ApiCallback;
import net.packet.client.ApiClient;
import net.packet.client.ApiException;
import net.packet.client.ApiResponse;
import net.packet.client.Configuration;
import net.packet.client.Pair;
import net.packet.client.ProgressRequestBody;
import net.packet.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import net.packet.client.model.Error;
import net.packet.client.model.Port;
import net.packet.client.model.PortAssignInput;
import net.packet.client.model.PortConvertLayer3Input;
import net.packet.client.model.PortVlanAssignment;
import net.packet.client.model.PortVlanAssignmentBatch;
import net.packet.client.model.PortVlanAssignmentBatchCreateInput;
import net.packet.client.model.PortVlanAssignmentBatchList;
import net.packet.client.model.PortVlanAssignmentList;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortsApi {
    private ApiClient apiClient;

    public PortsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for assignNativeVlan
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignNativeVlanCall(UUID id, String vnid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}/native-vlan"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vnid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vnid", vnid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignNativeVlanValidateBeforeCall(UUID id, String vnid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling assignNativeVlan(Async)");
        }
        
        // verify the required parameter 'vnid' is set
        if (vnid == null) {
            throw new ApiException("Missing the required parameter 'vnid' when calling assignNativeVlan(Async)");
        }
        

        com.squareup.okhttp.Call call = assignNativeVlanCall(id, vnid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign a native VLAN
     * Sets a virtual network on this port as a \&quot;native VLAN\&quot;. The VLAN must have already been assigned using the using the \&quot;Assign a port to a virtual network\&quot; operation.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port assignNativeVlan(UUID id, String vnid) throws ApiException {
        ApiResponse<Port> resp = assignNativeVlanWithHttpInfo(id, vnid);
        return resp.getData();
    }

    /**
     * Assign a native VLAN
     * Sets a virtual network on this port as a \&quot;native VLAN\&quot;. The VLAN must have already been assigned using the using the \&quot;Assign a port to a virtual network\&quot; operation.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> assignNativeVlanWithHttpInfo(UUID id, String vnid) throws ApiException {
        com.squareup.okhttp.Call call = assignNativeVlanValidateBeforeCall(id, vnid, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign a native VLAN (asynchronously)
     * Sets a virtual network on this port as a \&quot;native VLAN\&quot;. The VLAN must have already been assigned using the using the \&quot;Assign a port to a virtual network\&quot; operation.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignNativeVlanAsync(UUID id, String vnid, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignNativeVlanValidateBeforeCall(id, vnid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for assignPort
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call assignPortCall(UUID id, PortAssignInput vnid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = vnid;

        // create path and map variables
        String localVarPath = "/ports/{id}/assign"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call assignPortValidateBeforeCall(UUID id, PortAssignInput vnid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling assignPort(Async)");
        }
        
        // verify the required parameter 'vnid' is set
        if (vnid == null) {
            throw new ApiException("Missing the required parameter 'vnid' when calling assignPort(Async)");
        }
        

        com.squareup.okhttp.Call call = assignPortCall(id, vnid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Assign a port to virtual network
     * Assign a port for a hardware to virtual network.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port assignPort(UUID id, PortAssignInput vnid) throws ApiException {
        ApiResponse<Port> resp = assignPortWithHttpInfo(id, vnid);
        return resp.getData();
    }

    /**
     * Assign a port to virtual network
     * Assign a port for a hardware to virtual network.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> assignPortWithHttpInfo(UUID id, PortAssignInput vnid) throws ApiException {
        com.squareup.okhttp.Call call = assignPortValidateBeforeCall(id, vnid, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Assign a port to virtual network (asynchronously)
     * Assign a port for a hardware to virtual network.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call assignPortAsync(UUID id, PortAssignInput vnid, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = assignPortValidateBeforeCall(id, vnid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bondPort
     * @param id Port UUID (required)
     * @param bulkEnable enable both ports (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bondPortCall(UUID id, Boolean bulkEnable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}/bond"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bulkEnable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bulk_enable", bulkEnable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bondPortValidateBeforeCall(UUID id, Boolean bulkEnable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bondPort(Async)");
        }
        

        com.squareup.okhttp.Call call = bondPortCall(id, bulkEnable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enabling bonding
     * Enabling bonding for one or all ports
     * @param id Port UUID (required)
     * @param bulkEnable enable both ports (optional)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port bondPort(UUID id, Boolean bulkEnable) throws ApiException {
        ApiResponse<Port> resp = bondPortWithHttpInfo(id, bulkEnable);
        return resp.getData();
    }

    /**
     * Enabling bonding
     * Enabling bonding for one or all ports
     * @param id Port UUID (required)
     * @param bulkEnable enable both ports (optional)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> bondPortWithHttpInfo(UUID id, Boolean bulkEnable) throws ApiException {
        com.squareup.okhttp.Call call = bondPortValidateBeforeCall(id, bulkEnable, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enabling bonding (asynchronously)
     * Enabling bonding for one or all ports
     * @param id Port UUID (required)
     * @param bulkEnable enable both ports (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bondPortAsync(UUID id, Boolean bulkEnable, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bondPortValidateBeforeCall(id, bulkEnable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertLayer2
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertLayer2Call(UUID id, PortAssignInput vnid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = vnid;

        // create path and map variables
        String localVarPath = "/ports/{id}/convert/layer-2"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertLayer2ValidateBeforeCall(UUID id, PortAssignInput vnid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling convertLayer2(Async)");
        }
        

        com.squareup.okhttp.Call call = convertLayer2Call(id, vnid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert to Layer 2
     * Converts a bond port to Layer 2. IP assignments of the port will be removed.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID (optional)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port convertLayer2(UUID id, PortAssignInput vnid) throws ApiException {
        ApiResponse<Port> resp = convertLayer2WithHttpInfo(id, vnid);
        return resp.getData();
    }

    /**
     * Convert to Layer 2
     * Converts a bond port to Layer 2. IP assignments of the port will be removed.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID (optional)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> convertLayer2WithHttpInfo(UUID id, PortAssignInput vnid) throws ApiException {
        com.squareup.okhttp.Call call = convertLayer2ValidateBeforeCall(id, vnid, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert to Layer 2 (asynchronously)
     * Converts a bond port to Layer 2. IP assignments of the port will be removed.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertLayer2Async(UUID id, PortAssignInput vnid, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertLayer2ValidateBeforeCall(id, vnid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for convertLayer3
     * @param id Port UUID (required)
     * @param requestIps IPs to request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertLayer3Call(UUID id, PortConvertLayer3Input requestIps, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestIps;

        // create path and map variables
        String localVarPath = "/ports/{id}/convert/layer-3"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call convertLayer3ValidateBeforeCall(UUID id, PortConvertLayer3Input requestIps, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling convertLayer3(Async)");
        }
        

        com.squareup.okhttp.Call call = convertLayer3Call(id, requestIps, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Convert to Layer 3
     * Converts a bond port to Layer 3. VLANs must first be unassigned.
     * @param id Port UUID (required)
     * @param requestIps IPs to request (optional)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port convertLayer3(UUID id, PortConvertLayer3Input requestIps) throws ApiException {
        ApiResponse<Port> resp = convertLayer3WithHttpInfo(id, requestIps);
        return resp.getData();
    }

    /**
     * Convert to Layer 3
     * Converts a bond port to Layer 3. VLANs must first be unassigned.
     * @param id Port UUID (required)
     * @param requestIps IPs to request (optional)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> convertLayer3WithHttpInfo(UUID id, PortConvertLayer3Input requestIps) throws ApiException {
        com.squareup.okhttp.Call call = convertLayer3ValidateBeforeCall(id, requestIps, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert to Layer 3 (asynchronously)
     * Converts a bond port to Layer 3. VLANs must first be unassigned.
     * @param id Port UUID (required)
     * @param requestIps IPs to request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertLayer3Async(UUID id, PortConvertLayer3Input requestIps, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertLayer3ValidateBeforeCall(id, requestIps, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPortVlanAssignmentBatch
     * @param id Port UUID (required)
     * @param vlanAssignments VLAN Assignment batch details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortVlanAssignmentBatchCall(UUID id, PortVlanAssignmentBatchCreateInput vlanAssignments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = vlanAssignments;

        // create path and map variables
        String localVarPath = "/ports/{id}/vlan-assignments/batches"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortVlanAssignmentBatchValidateBeforeCall(UUID id, PortVlanAssignmentBatchCreateInput vlanAssignments, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createPortVlanAssignmentBatch(Async)");
        }
        
        // verify the required parameter 'vlanAssignments' is set
        if (vlanAssignments == null) {
            throw new ApiException("Missing the required parameter 'vlanAssignments' when calling createPortVlanAssignmentBatch(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortVlanAssignmentBatchCall(id, vlanAssignments, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new Port-VLAN Assignment management batch
     * Create a new asynchronous batch request which handles adding and/or removing the VLANs to which the port is assigned.
     * @param id Port UUID (required)
     * @param vlanAssignments VLAN Assignment batch details (required)
     * @return PortVlanAssignmentBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortVlanAssignmentBatch createPortVlanAssignmentBatch(UUID id, PortVlanAssignmentBatchCreateInput vlanAssignments) throws ApiException {
        ApiResponse<PortVlanAssignmentBatch> resp = createPortVlanAssignmentBatchWithHttpInfo(id, vlanAssignments);
        return resp.getData();
    }

    /**
     * Create a new Port-VLAN Assignment management batch
     * Create a new asynchronous batch request which handles adding and/or removing the VLANs to which the port is assigned.
     * @param id Port UUID (required)
     * @param vlanAssignments VLAN Assignment batch details (required)
     * @return ApiResponse&lt;PortVlanAssignmentBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortVlanAssignmentBatch> createPortVlanAssignmentBatchWithHttpInfo(UUID id, PortVlanAssignmentBatchCreateInput vlanAssignments) throws ApiException {
        com.squareup.okhttp.Call call = createPortVlanAssignmentBatchValidateBeforeCall(id, vlanAssignments, null, null);
        Type localVarReturnType = new TypeToken<PortVlanAssignmentBatch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Port-VLAN Assignment management batch (asynchronously)
     * Create a new asynchronous batch request which handles adding and/or removing the VLANs to which the port is assigned.
     * @param id Port UUID (required)
     * @param vlanAssignments VLAN Assignment batch details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortVlanAssignmentBatchAsync(UUID id, PortVlanAssignmentBatchCreateInput vlanAssignments, final ApiCallback<PortVlanAssignmentBatch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortVlanAssignmentBatchValidateBeforeCall(id, vlanAssignments, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortVlanAssignmentBatch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteNativeVlan
     * @param id Port UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNativeVlanCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}/native-vlan"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNativeVlanValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteNativeVlan(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteNativeVlanCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Remove native VLAN
     * Removes the native VLAN from this port
     * @param id Port UUID (required)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port deleteNativeVlan(UUID id) throws ApiException {
        ApiResponse<Port> resp = deleteNativeVlanWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Remove native VLAN
     * Removes the native VLAN from this port
     * @param id Port UUID (required)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> deleteNativeVlanWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = deleteNativeVlanValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove native VLAN (asynchronously)
     * Removes the native VLAN from this port
     * @param id Port UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNativeVlanAsync(UUID id, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNativeVlanValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for disbondPort
     * @param id Port UUID (required)
     * @param bulkDisable disable both ports (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disbondPortCall(UUID id, Boolean bulkDisable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}/disbond"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bulkDisable != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bulk_disable", bulkDisable));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disbondPortValidateBeforeCall(UUID id, Boolean bulkDisable, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disbondPort(Async)");
        }
        

        com.squareup.okhttp.Call call = disbondPortCall(id, bulkDisable, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disabling bonding
     * Disabling bonding for one or all ports
     * @param id Port UUID (required)
     * @param bulkDisable disable both ports (optional)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port disbondPort(UUID id, Boolean bulkDisable) throws ApiException {
        ApiResponse<Port> resp = disbondPortWithHttpInfo(id, bulkDisable);
        return resp.getData();
    }

    /**
     * Disabling bonding
     * Disabling bonding for one or all ports
     * @param id Port UUID (required)
     * @param bulkDisable disable both ports (optional)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> disbondPortWithHttpInfo(UUID id, Boolean bulkDisable) throws ApiException {
        com.squareup.okhttp.Call call = disbondPortValidateBeforeCall(id, bulkDisable, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disabling bonding (asynchronously)
     * Disabling bonding for one or all ports
     * @param id Port UUID (required)
     * @param bulkDisable disable both ports (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disbondPortAsync(UUID id, Boolean bulkDisable, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disbondPortValidateBeforeCall(id, bulkDisable, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findPortById
     * @param id Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findPortByIdCall(UUID id, List<String> include, List<String> exclude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (exclude != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "exclude", exclude));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findPortByIdValidateBeforeCall(UUID id, List<String> include, List<String> exclude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPortById(Async)");
        }
        

        com.squareup.okhttp.Call call = findPortByIdCall(id, include, exclude, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a port
     * Returns a port
     * @param id Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port findPortById(UUID id, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<Port> resp = findPortByIdWithHttpInfo(id, include, exclude);
        return resp.getData();
    }

    /**
     * Retrieve a port
     * Returns a port
     * @param id Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> findPortByIdWithHttpInfo(UUID id, List<String> include, List<String> exclude) throws ApiException {
        com.squareup.okhttp.Call call = findPortByIdValidateBeforeCall(id, include, exclude, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a port (asynchronously)
     * Returns a port
     * @param id Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPortByIdAsync(UUID id, List<String> include, List<String> exclude, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findPortByIdValidateBeforeCall(id, include, exclude, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findPortVlanAssignmentBatchByPortIdAndBatchId
     * @param id Port UUID (required)
     * @param batchId Batch ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findPortVlanAssignmentBatchByPortIdAndBatchIdCall(UUID id, UUID batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}/vlan-assignments/batches/{batch_id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "batch_id" + "\\}", apiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findPortVlanAssignmentBatchByPortIdAndBatchIdValidateBeforeCall(UUID id, UUID batchId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPortVlanAssignmentBatchByPortIdAndBatchId(Async)");
        }
        
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling findPortVlanAssignmentBatchByPortIdAndBatchId(Async)");
        }
        

        com.squareup.okhttp.Call call = findPortVlanAssignmentBatchByPortIdAndBatchIdCall(id, batchId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a VLAN Assignment Batch&#39;s details
     * Returns the details of an existing Port-VLAN Assignment batch, including the list of VLANs to assign or unassign, and the current state of the batch.
     * @param id Port UUID (required)
     * @param batchId Batch ID (required)
     * @return PortVlanAssignmentBatch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortVlanAssignmentBatch findPortVlanAssignmentBatchByPortIdAndBatchId(UUID id, UUID batchId) throws ApiException {
        ApiResponse<PortVlanAssignmentBatch> resp = findPortVlanAssignmentBatchByPortIdAndBatchIdWithHttpInfo(id, batchId);
        return resp.getData();
    }

    /**
     * Retrieve a VLAN Assignment Batch&#39;s details
     * Returns the details of an existing Port-VLAN Assignment batch, including the list of VLANs to assign or unassign, and the current state of the batch.
     * @param id Port UUID (required)
     * @param batchId Batch ID (required)
     * @return ApiResponse&lt;PortVlanAssignmentBatch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortVlanAssignmentBatch> findPortVlanAssignmentBatchByPortIdAndBatchIdWithHttpInfo(UUID id, UUID batchId) throws ApiException {
        com.squareup.okhttp.Call call = findPortVlanAssignmentBatchByPortIdAndBatchIdValidateBeforeCall(id, batchId, null, null);
        Type localVarReturnType = new TypeToken<PortVlanAssignmentBatch>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a VLAN Assignment Batch&#39;s details (asynchronously)
     * Returns the details of an existing Port-VLAN Assignment batch, including the list of VLANs to assign or unassign, and the current state of the batch.
     * @param id Port UUID (required)
     * @param batchId Batch ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPortVlanAssignmentBatchByPortIdAndBatchIdAsync(UUID id, UUID batchId, final ApiCallback<PortVlanAssignmentBatch> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findPortVlanAssignmentBatchByPortIdAndBatchIdValidateBeforeCall(id, batchId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortVlanAssignmentBatch>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findPortVlanAssignmentBatches
     * @param id Port UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findPortVlanAssignmentBatchesCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}/vlan-assignments/batches"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findPortVlanAssignmentBatchesValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPortVlanAssignmentBatches(Async)");
        }
        

        com.squareup.okhttp.Call call = findPortVlanAssignmentBatchesCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List the VLAN Assignment Batches for a port
     * Show all the VLAN assignment batches that have been created for managing this port&#39;s VLAN assignments
     * @param id Port UUID (required)
     * @return PortVlanAssignmentBatchList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortVlanAssignmentBatchList findPortVlanAssignmentBatches(UUID id) throws ApiException {
        ApiResponse<PortVlanAssignmentBatchList> resp = findPortVlanAssignmentBatchesWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * List the VLAN Assignment Batches for a port
     * Show all the VLAN assignment batches that have been created for managing this port&#39;s VLAN assignments
     * @param id Port UUID (required)
     * @return ApiResponse&lt;PortVlanAssignmentBatchList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortVlanAssignmentBatchList> findPortVlanAssignmentBatchesWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = findPortVlanAssignmentBatchesValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<PortVlanAssignmentBatchList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List the VLAN Assignment Batches for a port (asynchronously)
     * Show all the VLAN assignment batches that have been created for managing this port&#39;s VLAN assignments
     * @param id Port UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPortVlanAssignmentBatchesAsync(UUID id, final ApiCallback<PortVlanAssignmentBatchList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findPortVlanAssignmentBatchesValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortVlanAssignmentBatchList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findPortVlanAssignmentByPortIdAndAssignmentId
     * @param id Port UUID (required)
     * @param assignmentId Assignment ID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional, default to ["port","virtual_network"])
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findPortVlanAssignmentByPortIdAndAssignmentIdCall(UUID id, UUID assignmentId, List<String> include, List<String> exclude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}/vlan-assignments/{assignment_id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "assignment_id" + "\\}", apiClient.escapeString(assignmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (exclude != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "exclude", exclude));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findPortVlanAssignmentByPortIdAndAssignmentIdValidateBeforeCall(UUID id, UUID assignmentId, List<String> include, List<String> exclude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPortVlanAssignmentByPortIdAndAssignmentId(Async)");
        }
        
        // verify the required parameter 'assignmentId' is set
        if (assignmentId == null) {
            throw new ApiException("Missing the required parameter 'assignmentId' when calling findPortVlanAssignmentByPortIdAndAssignmentId(Async)");
        }
        

        com.squareup.okhttp.Call call = findPortVlanAssignmentByPortIdAndAssignmentIdCall(id, assignmentId, include, exclude, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Show a particular Port VLAN assignment&#39;s details
     * Show the details of a specific Port-VLAN assignment, including the current state and if the VLAN is set as native.
     * @param id Port UUID (required)
     * @param assignmentId Assignment ID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional, default to ["port","virtual_network"])
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @return PortVlanAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortVlanAssignment findPortVlanAssignmentByPortIdAndAssignmentId(UUID id, UUID assignmentId, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<PortVlanAssignment> resp = findPortVlanAssignmentByPortIdAndAssignmentIdWithHttpInfo(id, assignmentId, include, exclude);
        return resp.getData();
    }

    /**
     * Show a particular Port VLAN assignment&#39;s details
     * Show the details of a specific Port-VLAN assignment, including the current state and if the VLAN is set as native.
     * @param id Port UUID (required)
     * @param assignmentId Assignment ID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional, default to ["port","virtual_network"])
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @return ApiResponse&lt;PortVlanAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortVlanAssignment> findPortVlanAssignmentByPortIdAndAssignmentIdWithHttpInfo(UUID id, UUID assignmentId, List<String> include, List<String> exclude) throws ApiException {
        com.squareup.okhttp.Call call = findPortVlanAssignmentByPortIdAndAssignmentIdValidateBeforeCall(id, assignmentId, include, exclude, null, null);
        Type localVarReturnType = new TypeToken<PortVlanAssignment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show a particular Port VLAN assignment&#39;s details (asynchronously)
     * Show the details of a specific Port-VLAN assignment, including the current state and if the VLAN is set as native.
     * @param id Port UUID (required)
     * @param assignmentId Assignment ID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional, default to ["port","virtual_network"])
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPortVlanAssignmentByPortIdAndAssignmentIdAsync(UUID id, UUID assignmentId, List<String> include, List<String> exclude, final ApiCallback<PortVlanAssignment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findPortVlanAssignmentByPortIdAndAssignmentIdValidateBeforeCall(id, assignmentId, include, exclude, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortVlanAssignment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findPortVlanAssignments
     * @param id Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional, default to ["port","virtual_network"])
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findPortVlanAssignmentsCall(UUID id, List<String> include, List<String> exclude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ports/{id}/vlan-assignments"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (exclude != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "exclude", exclude));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findPortVlanAssignmentsValidateBeforeCall(UUID id, List<String> include, List<String> exclude, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findPortVlanAssignments(Async)");
        }
        

        com.squareup.okhttp.Call call = findPortVlanAssignmentsCall(id, include, exclude, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Current VLAN assignments for a port
     * Show the port&#39;s current VLAN assignments, including if this VLAN is set as native, and the current state of the assignment (ex. &#39;assigned&#39; or &#39;unassigning&#39;)
     * @param id Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional, default to ["port","virtual_network"])
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @return PortVlanAssignmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortVlanAssignmentList findPortVlanAssignments(UUID id, List<String> include, List<String> exclude) throws ApiException {
        ApiResponse<PortVlanAssignmentList> resp = findPortVlanAssignmentsWithHttpInfo(id, include, exclude);
        return resp.getData();
    }

    /**
     * List Current VLAN assignments for a port
     * Show the port&#39;s current VLAN assignments, including if this VLAN is set as native, and the current state of the assignment (ex. &#39;assigned&#39; or &#39;unassigning&#39;)
     * @param id Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional, default to ["port","virtual_network"])
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @return ApiResponse&lt;PortVlanAssignmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortVlanAssignmentList> findPortVlanAssignmentsWithHttpInfo(UUID id, List<String> include, List<String> exclude) throws ApiException {
        com.squareup.okhttp.Call call = findPortVlanAssignmentsValidateBeforeCall(id, include, exclude, null, null);
        Type localVarReturnType = new TypeToken<PortVlanAssignmentList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Current VLAN assignments for a port (asynchronously)
     * Show the port&#39;s current VLAN assignments, including if this VLAN is set as native, and the current state of the assignment (ex. &#39;assigned&#39; or &#39;unassigning&#39;)
     * @param id Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional, default to ["port","virtual_network"])
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findPortVlanAssignmentsAsync(UUID id, List<String> include, List<String> exclude, final ApiCallback<PortVlanAssignmentList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findPortVlanAssignmentsValidateBeforeCall(id, include, exclude, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortVlanAssignmentList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unassignPort
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unassignPortCall(UUID id, PortAssignInput vnid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = vnid;

        // create path and map variables
        String localVarPath = "/ports/{id}/unassign"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unassignPortValidateBeforeCall(UUID id, PortAssignInput vnid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unassignPort(Async)");
        }
        
        // verify the required parameter 'vnid' is set
        if (vnid == null) {
            throw new ApiException("Missing the required parameter 'vnid' when calling unassignPort(Async)");
        }
        

        com.squareup.okhttp.Call call = unassignPortCall(id, vnid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unassign a port
     * Unassign a port for a hardware.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @return Port
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Port unassignPort(UUID id, PortAssignInput vnid) throws ApiException {
        ApiResponse<Port> resp = unassignPortWithHttpInfo(id, vnid);
        return resp.getData();
    }

    /**
     * Unassign a port
     * Unassign a port for a hardware.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @return ApiResponse&lt;Port&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Port> unassignPortWithHttpInfo(UUID id, PortAssignInput vnid) throws ApiException {
        com.squareup.okhttp.Call call = unassignPortValidateBeforeCall(id, vnid, null, null);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unassign a port (asynchronously)
     * Unassign a port for a hardware.
     * @param id Port UUID (required)
     * @param vnid Virtual Network ID. May be the UUID of the Virtual Network record, or the VLAN value itself (ex: &#39;1001&#39;). (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unassignPortAsync(UUID id, PortAssignInput vnid, final ApiCallback<Port> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unassignPortValidateBeforeCall(id, vnid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Port>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
