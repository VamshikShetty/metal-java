/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.ApiCallback;
import net.packet.client.ApiClient;
import net.packet.client.ApiException;
import net.packet.client.ApiResponse;
import net.packet.client.Configuration;
import net.packet.client.Pair;
import net.packet.client.ProgressRequestBody;
import net.packet.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import net.packet.client.model.Error;
import net.packet.client.model.Event;
import net.packet.client.model.Interconnection;
import net.packet.client.model.InterconnectionCreateInput;
import net.packet.client.model.InterconnectionList;
import net.packet.client.model.InterconnectionPort;
import net.packet.client.model.InterconnectionPortList;
import net.packet.client.model.InterconnectionUpdateInput;
import java.util.UUID;
import net.packet.client.model.VirtualCircuit;
import net.packet.client.model.VirtualCircuitCreateInput;
import net.packet.client.model.VirtualCircuitList;
import net.packet.client.model.VirtualCircuitUpdateInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectionsApi {
    private ApiClient apiClient;

    public ConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createConnectionPortVirtualCircuit
     * @param connectionId UUID of the connection (required)
     * @param portId UUID of the connection port (required)
     * @param virtualCircuit Virtual Circuit details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createConnectionPortVirtualCircuitCall(UUID connectionId, UUID portId, VirtualCircuitCreateInput virtualCircuit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = virtualCircuit;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}/ports/{port_id}/virtual-circuits"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()))
            .replaceAll("\\{" + "port_id" + "\\}", apiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createConnectionPortVirtualCircuitValidateBeforeCall(UUID connectionId, UUID portId, VirtualCircuitCreateInput virtualCircuit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling createConnectionPortVirtualCircuit(Async)");
        }
        
        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling createConnectionPortVirtualCircuit(Async)");
        }
        
        // verify the required parameter 'virtualCircuit' is set
        if (virtualCircuit == null) {
            throw new ApiException("Missing the required parameter 'virtualCircuit' when calling createConnectionPortVirtualCircuit(Async)");
        }
        

        com.squareup.okhttp.Call call = createConnectionPortVirtualCircuitCall(connectionId, portId, virtualCircuit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new Virtual Circuit
     * Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.
     * @param connectionId UUID of the connection (required)
     * @param portId UUID of the connection port (required)
     * @param virtualCircuit Virtual Circuit details (required)
     * @return VirtualCircuitList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VirtualCircuitList createConnectionPortVirtualCircuit(UUID connectionId, UUID portId, VirtualCircuitCreateInput virtualCircuit) throws ApiException {
        ApiResponse<VirtualCircuitList> resp = createConnectionPortVirtualCircuitWithHttpInfo(connectionId, portId, virtualCircuit);
        return resp.getData();
    }

    /**
     * Create a new Virtual Circuit
     * Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.
     * @param connectionId UUID of the connection (required)
     * @param portId UUID of the connection port (required)
     * @param virtualCircuit Virtual Circuit details (required)
     * @return ApiResponse&lt;VirtualCircuitList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VirtualCircuitList> createConnectionPortVirtualCircuitWithHttpInfo(UUID connectionId, UUID portId, VirtualCircuitCreateInput virtualCircuit) throws ApiException {
        com.squareup.okhttp.Call call = createConnectionPortVirtualCircuitValidateBeforeCall(connectionId, portId, virtualCircuit, null, null);
        Type localVarReturnType = new TypeToken<VirtualCircuitList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new Virtual Circuit (asynchronously)
     * Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.
     * @param connectionId UUID of the connection (required)
     * @param portId UUID of the connection port (required)
     * @param virtualCircuit Virtual Circuit details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createConnectionPortVirtualCircuitAsync(UUID connectionId, UUID portId, VirtualCircuitCreateInput virtualCircuit, final ApiCallback<VirtualCircuitList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createConnectionPortVirtualCircuitValidateBeforeCall(connectionId, portId, virtualCircuit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VirtualCircuitList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrganizationInterconnection
     * @param organizationId UUID of the organization (required)
     * @param connection Connection details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrganizationInterconnectionCall(UUID organizationId, InterconnectionCreateInput connection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connection;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/connections"
            .replaceAll("\\{" + "organization_id" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrganizationInterconnectionValidateBeforeCall(UUID organizationId, InterconnectionCreateInput connection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createOrganizationInterconnection(Async)");
        }
        
        // verify the required parameter 'connection' is set
        if (connection == null) {
            throw new ApiException("Missing the required parameter 'connection' when calling createOrganizationInterconnection(Async)");
        }
        

        com.squareup.okhttp.Call call = createOrganizationInterconnectionCall(organizationId, connection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Request a new connection for the organization
     * Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.
     * @param organizationId UUID of the organization (required)
     * @param connection Connection details (required)
     * @return Interconnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Interconnection createOrganizationInterconnection(UUID organizationId, InterconnectionCreateInput connection) throws ApiException {
        ApiResponse<Interconnection> resp = createOrganizationInterconnectionWithHttpInfo(organizationId, connection);
        return resp.getData();
    }

    /**
     * Request a new connection for the organization
     * Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.
     * @param organizationId UUID of the organization (required)
     * @param connection Connection details (required)
     * @return ApiResponse&lt;Interconnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Interconnection> createOrganizationInterconnectionWithHttpInfo(UUID organizationId, InterconnectionCreateInput connection) throws ApiException {
        com.squareup.okhttp.Call call = createOrganizationInterconnectionValidateBeforeCall(organizationId, connection, null, null);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request a new connection for the organization (asynchronously)
     * Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.
     * @param organizationId UUID of the organization (required)
     * @param connection Connection details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrganizationInterconnectionAsync(UUID organizationId, InterconnectionCreateInput connection, final ApiCallback<Interconnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrganizationInterconnectionValidateBeforeCall(organizationId, connection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProjectInterconnection
     * @param projectId UUID of the project (required)
     * @param connection Connection details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProjectInterconnectionCall(UUID projectId, InterconnectionCreateInput connection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connection;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/connections"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProjectInterconnectionValidateBeforeCall(UUID projectId, InterconnectionCreateInput connection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createProjectInterconnection(Async)");
        }
        
        // verify the required parameter 'connection' is set
        if (connection == null) {
            throw new ApiException("Missing the required parameter 'connection' when calling createProjectInterconnection(Async)");
        }
        

        com.squareup.okhttp.Call call = createProjectInterconnectionCall(projectId, connection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Request a new connection for the project&#39;s organization
     * Creates a new connection request
     * @param projectId UUID of the project (required)
     * @param connection Connection details (required)
     * @return Interconnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Interconnection createProjectInterconnection(UUID projectId, InterconnectionCreateInput connection) throws ApiException {
        ApiResponse<Interconnection> resp = createProjectInterconnectionWithHttpInfo(projectId, connection);
        return resp.getData();
    }

    /**
     * Request a new connection for the project&#39;s organization
     * Creates a new connection request
     * @param projectId UUID of the project (required)
     * @param connection Connection details (required)
     * @return ApiResponse&lt;Interconnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Interconnection> createProjectInterconnectionWithHttpInfo(UUID projectId, InterconnectionCreateInput connection) throws ApiException {
        com.squareup.okhttp.Call call = createProjectInterconnectionValidateBeforeCall(projectId, connection, null, null);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request a new connection for the project&#39;s organization (asynchronously)
     * Creates a new connection request
     * @param projectId UUID of the project (required)
     * @param connection Connection details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProjectInterconnectionAsync(UUID projectId, InterconnectionCreateInput connection, final ApiCallback<Interconnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProjectInterconnectionValidateBeforeCall(projectId, connection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteInterconnection
     * @param connectionId Connection UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteInterconnectionCall(UUID connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteInterconnectionValidateBeforeCall(UUID connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling deleteInterconnection(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteInterconnectionCall(connectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete connection
     * Delete a connection, its associated ports and virtual circuits.
     * @param connectionId Connection UUID (required)
     * @return Interconnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Interconnection deleteInterconnection(UUID connectionId) throws ApiException {
        ApiResponse<Interconnection> resp = deleteInterconnectionWithHttpInfo(connectionId);
        return resp.getData();
    }

    /**
     * Delete connection
     * Delete a connection, its associated ports and virtual circuits.
     * @param connectionId Connection UUID (required)
     * @return ApiResponse&lt;Interconnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Interconnection> deleteInterconnectionWithHttpInfo(UUID connectionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteInterconnectionValidateBeforeCall(connectionId, null, null);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete connection (asynchronously)
     * Delete a connection, its associated ports and virtual circuits.
     * @param connectionId Connection UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteInterconnectionAsync(UUID connectionId, final ApiCallback<Interconnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteInterconnectionValidateBeforeCall(connectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteVirtualCircuit
     * @param id Virtual Circuit UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVirtualCircuitCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virtual-circuits/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVirtualCircuitValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVirtualCircuit(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteVirtualCircuitCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a virtual circuit
     * Delete a virtual circuit from a dedicated port.
     * @param id Virtual Circuit UUID (required)
     * @return VirtualCircuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VirtualCircuit deleteVirtualCircuit(UUID id) throws ApiException {
        ApiResponse<VirtualCircuit> resp = deleteVirtualCircuitWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Delete a virtual circuit
     * Delete a virtual circuit from a dedicated port.
     * @param id Virtual Circuit UUID (required)
     * @return ApiResponse&lt;VirtualCircuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VirtualCircuit> deleteVirtualCircuitWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = deleteVirtualCircuitValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<VirtualCircuit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a virtual circuit (asynchronously)
     * Delete a virtual circuit from a dedicated port.
     * @param id Virtual Circuit UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVirtualCircuitAsync(UUID id, final ApiCallback<VirtualCircuit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVirtualCircuitValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VirtualCircuit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConnectionEvents
     * @param connectionId Connection UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConnectionEventsCall(UUID connectionId, List<String> include, List<String> exclude, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}/events"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (exclude != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "exclude", exclude));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConnectionEventsValidateBeforeCall(UUID connectionId, List<String> include, List<String> exclude, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling findConnectionEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = findConnectionEventsCall(connectionId, include, exclude, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection events
     * Returns a list of the connection events
     * @param connectionId Connection UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Event findConnectionEvents(UUID connectionId, List<String> include, List<String> exclude, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Event> resp = findConnectionEventsWithHttpInfo(connectionId, include, exclude, page, perPage);
        return resp.getData();
    }

    /**
     * Retrieve connection events
     * Returns a list of the connection events
     * @param connectionId Connection UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Event> findConnectionEventsWithHttpInfo(UUID connectionId, List<String> include, List<String> exclude, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findConnectionEventsValidateBeforeCall(connectionId, include, exclude, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection events (asynchronously)
     * Returns a list of the connection events
     * @param connectionId Connection UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConnectionEventsAsync(UUID connectionId, List<String> include, List<String> exclude, Integer page, Integer perPage, final ApiCallback<Event> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConnectionEventsValidateBeforeCall(connectionId, include, exclude, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findConnectionPortEvents
     * @param connectionId Connection UUID (required)
     * @param id Connection Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findConnectionPortEventsCall(UUID connectionId, UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}/ports/{id}/events"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (exclude != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "exclude", exclude));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findConnectionPortEventsValidateBeforeCall(UUID connectionId, UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling findConnectionPortEvents(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findConnectionPortEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = findConnectionPortEventsCall(connectionId, id, include, exclude, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection port events
     * Returns a list of the connection port events
     * @param connectionId Connection UUID (required)
     * @param id Connection Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Event findConnectionPortEvents(UUID connectionId, UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Event> resp = findConnectionPortEventsWithHttpInfo(connectionId, id, include, exclude, page, perPage);
        return resp.getData();
    }

    /**
     * Retrieve connection port events
     * Returns a list of the connection port events
     * @param connectionId Connection UUID (required)
     * @param id Connection Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Event> findConnectionPortEventsWithHttpInfo(UUID connectionId, UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findConnectionPortEventsValidateBeforeCall(connectionId, id, include, exclude, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection port events (asynchronously)
     * Returns a list of the connection port events
     * @param connectionId Connection UUID (required)
     * @param id Connection Port UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findConnectionPortEventsAsync(UUID connectionId, UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage, final ApiCallback<Event> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findConnectionPortEventsValidateBeforeCall(connectionId, id, include, exclude, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findVirtualCircuitEvents
     * @param id Virtual Circuit UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findVirtualCircuitEventsCall(UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virtual-circuit/{id}/events"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "include", include));
        if (exclude != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "exclude", exclude));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findVirtualCircuitEventsValidateBeforeCall(UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findVirtualCircuitEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = findVirtualCircuitEventsCall(id, include, exclude, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve connection events
     * Returns a list of the virtual circuit events
     * @param id Virtual Circuit UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Event findVirtualCircuitEvents(UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Event> resp = findVirtualCircuitEventsWithHttpInfo(id, include, exclude, page, perPage);
        return resp.getData();
    }

    /**
     * Retrieve connection events
     * Returns a list of the virtual circuit events
     * @param id Virtual Circuit UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Event> findVirtualCircuitEventsWithHttpInfo(UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findVirtualCircuitEventsValidateBeforeCall(id, include, exclude, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve connection events (asynchronously)
     * Returns a list of the virtual circuit events
     * @param id Virtual Circuit UUID (required)
     * @param include Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
     * @param exclude Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findVirtualCircuitEventsAsync(UUID id, List<String> include, List<String> exclude, Integer page, Integer perPage, final ApiCallback<Event> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findVirtualCircuitEventsValidateBeforeCall(id, include, exclude, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConnectionPort
     * @param connectionId UUID of the connection (required)
     * @param id Port UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConnectionPortCall(UUID connectionId, UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}/ports/{id}"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConnectionPortValidateBeforeCall(UUID connectionId, UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getConnectionPort(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectionPort(Async)");
        }
        

        com.squareup.okhttp.Call call = getConnectionPortCall(connectionId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a connection port
     * Get the details of an connection port.
     * @param connectionId UUID of the connection (required)
     * @param id Port UUID (required)
     * @return InterconnectionPort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterconnectionPort getConnectionPort(UUID connectionId, UUID id) throws ApiException {
        ApiResponse<InterconnectionPort> resp = getConnectionPortWithHttpInfo(connectionId, id);
        return resp.getData();
    }

    /**
     * Get a connection port
     * Get the details of an connection port.
     * @param connectionId UUID of the connection (required)
     * @param id Port UUID (required)
     * @return ApiResponse&lt;InterconnectionPort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterconnectionPort> getConnectionPortWithHttpInfo(UUID connectionId, UUID id) throws ApiException {
        com.squareup.okhttp.Call call = getConnectionPortValidateBeforeCall(connectionId, id, null, null);
        Type localVarReturnType = new TypeToken<InterconnectionPort>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a connection port (asynchronously)
     * Get the details of an connection port.
     * @param connectionId UUID of the connection (required)
     * @param id Port UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConnectionPortAsync(UUID connectionId, UUID id, final ApiCallback<InterconnectionPort> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConnectionPortValidateBeforeCall(connectionId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterconnectionPort>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInterconnection
     * @param connectionId Connection UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInterconnectionCall(UUID connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInterconnectionValidateBeforeCall(UUID connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getInterconnection(Async)");
        }
        

        com.squareup.okhttp.Call call = getInterconnectionCall(connectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get connection
     * Get the details of a connection
     * @param connectionId Connection UUID (required)
     * @return Interconnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Interconnection getInterconnection(UUID connectionId) throws ApiException {
        ApiResponse<Interconnection> resp = getInterconnectionWithHttpInfo(connectionId);
        return resp.getData();
    }

    /**
     * Get connection
     * Get the details of a connection
     * @param connectionId Connection UUID (required)
     * @return ApiResponse&lt;Interconnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Interconnection> getInterconnectionWithHttpInfo(UUID connectionId) throws ApiException {
        com.squareup.okhttp.Call call = getInterconnectionValidateBeforeCall(connectionId, null, null);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get connection (asynchronously)
     * Get the details of a connection
     * @param connectionId Connection UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInterconnectionAsync(UUID connectionId, final ApiCallback<Interconnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInterconnectionValidateBeforeCall(connectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVirtualCircuit
     * @param id Virtual Circuit UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVirtualCircuitCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/virtual-circuits/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVirtualCircuitValidateBeforeCall(UUID id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVirtualCircuit(Async)");
        }
        

        com.squareup.okhttp.Call call = getVirtualCircuitCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a virtual circuit
     * Get the details of a virtual circuit
     * @param id Virtual Circuit UUID (required)
     * @return VirtualCircuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VirtualCircuit getVirtualCircuit(UUID id) throws ApiException {
        ApiResponse<VirtualCircuit> resp = getVirtualCircuitWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a virtual circuit
     * Get the details of a virtual circuit
     * @param id Virtual Circuit UUID (required)
     * @return ApiResponse&lt;VirtualCircuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VirtualCircuit> getVirtualCircuitWithHttpInfo(UUID id) throws ApiException {
        com.squareup.okhttp.Call call = getVirtualCircuitValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<VirtualCircuit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a virtual circuit (asynchronously)
     * Get the details of a virtual circuit
     * @param id Virtual Circuit UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVirtualCircuitAsync(UUID id, final ApiCallback<VirtualCircuit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVirtualCircuitValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VirtualCircuit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listConnectionPortVirtualCircuits
     * @param connectionId UUID of the connection (required)
     * @param portId UUID of the connection port (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listConnectionPortVirtualCircuitsCall(UUID connectionId, UUID portId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}/ports/{port_id}/virtual-circuits"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()))
            .replaceAll("\\{" + "port_id" + "\\}", apiClient.escapeString(portId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listConnectionPortVirtualCircuitsValidateBeforeCall(UUID connectionId, UUID portId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling listConnectionPortVirtualCircuits(Async)");
        }
        
        // verify the required parameter 'portId' is set
        if (portId == null) {
            throw new ApiException("Missing the required parameter 'portId' when calling listConnectionPortVirtualCircuits(Async)");
        }
        

        com.squareup.okhttp.Call call = listConnectionPortVirtualCircuitsCall(connectionId, portId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List a connection port&#39;s virtual circuits
     * List the virtual circuit record(s) associatiated with a particular connection port.
     * @param connectionId UUID of the connection (required)
     * @param portId UUID of the connection port (required)
     * @return VirtualCircuitList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VirtualCircuitList listConnectionPortVirtualCircuits(UUID connectionId, UUID portId) throws ApiException {
        ApiResponse<VirtualCircuitList> resp = listConnectionPortVirtualCircuitsWithHttpInfo(connectionId, portId);
        return resp.getData();
    }

    /**
     * List a connection port&#39;s virtual circuits
     * List the virtual circuit record(s) associatiated with a particular connection port.
     * @param connectionId UUID of the connection (required)
     * @param portId UUID of the connection port (required)
     * @return ApiResponse&lt;VirtualCircuitList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VirtualCircuitList> listConnectionPortVirtualCircuitsWithHttpInfo(UUID connectionId, UUID portId) throws ApiException {
        com.squareup.okhttp.Call call = listConnectionPortVirtualCircuitsValidateBeforeCall(connectionId, portId, null, null);
        Type localVarReturnType = new TypeToken<VirtualCircuitList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List a connection port&#39;s virtual circuits (asynchronously)
     * List the virtual circuit record(s) associatiated with a particular connection port.
     * @param connectionId UUID of the connection (required)
     * @param portId UUID of the connection port (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listConnectionPortVirtualCircuitsAsync(UUID connectionId, UUID portId, final ApiCallback<VirtualCircuitList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listConnectionPortVirtualCircuitsValidateBeforeCall(connectionId, portId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VirtualCircuitList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listConnectionPorts
     * @param connectionId UUID of the connection (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listConnectionPortsCall(UUID connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}/ports"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listConnectionPortsValidateBeforeCall(UUID connectionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling listConnectionPorts(Async)");
        }
        

        com.squareup.okhttp.Call call = listConnectionPortsCall(connectionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List a connection&#39;s ports
     * List the ports associated to an connection.
     * @param connectionId UUID of the connection (required)
     * @return InterconnectionPortList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterconnectionPortList listConnectionPorts(UUID connectionId) throws ApiException {
        ApiResponse<InterconnectionPortList> resp = listConnectionPortsWithHttpInfo(connectionId);
        return resp.getData();
    }

    /**
     * List a connection&#39;s ports
     * List the ports associated to an connection.
     * @param connectionId UUID of the connection (required)
     * @return ApiResponse&lt;InterconnectionPortList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterconnectionPortList> listConnectionPortsWithHttpInfo(UUID connectionId) throws ApiException {
        com.squareup.okhttp.Call call = listConnectionPortsValidateBeforeCall(connectionId, null, null);
        Type localVarReturnType = new TypeToken<InterconnectionPortList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List a connection&#39;s ports (asynchronously)
     * List the ports associated to an connection.
     * @param connectionId UUID of the connection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listConnectionPortsAsync(UUID connectionId, final ApiCallback<InterconnectionPortList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listConnectionPortsValidateBeforeCall(connectionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterconnectionPortList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organizationListInterconnections
     * @param organizationId UUID of the organization (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organizationListInterconnectionsCall(UUID organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/organizations/{organization_id}/connections"
            .replaceAll("\\{" + "organization_id" + "\\}", apiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organizationListInterconnectionsValidateBeforeCall(UUID organizationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling organizationListInterconnections(Async)");
        }
        

        com.squareup.okhttp.Call call = organizationListInterconnectionsCall(organizationId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List organization connections
     * List the connections belonging to the organization
     * @param organizationId UUID of the organization (required)
     * @return InterconnectionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterconnectionList organizationListInterconnections(UUID organizationId) throws ApiException {
        ApiResponse<InterconnectionList> resp = organizationListInterconnectionsWithHttpInfo(organizationId);
        return resp.getData();
    }

    /**
     * List organization connections
     * List the connections belonging to the organization
     * @param organizationId UUID of the organization (required)
     * @return ApiResponse&lt;InterconnectionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterconnectionList> organizationListInterconnectionsWithHttpInfo(UUID organizationId) throws ApiException {
        com.squareup.okhttp.Call call = organizationListInterconnectionsValidateBeforeCall(organizationId, null, null);
        Type localVarReturnType = new TypeToken<InterconnectionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List organization connections (asynchronously)
     * List the connections belonging to the organization
     * @param organizationId UUID of the organization (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organizationListInterconnectionsAsync(UUID organizationId, final ApiCallback<InterconnectionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organizationListInterconnectionsValidateBeforeCall(organizationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterconnectionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectListInterconnections
     * @param projectId UUID of the project (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectListInterconnectionsCall(UUID projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/connections"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectListInterconnectionsValidateBeforeCall(UUID projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectListInterconnections(Async)");
        }
        

        com.squareup.okhttp.Call call = projectListInterconnectionsCall(projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List project connections
     * List the connections belonging to the project
     * @param projectId UUID of the project (required)
     * @return InterconnectionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InterconnectionList projectListInterconnections(UUID projectId) throws ApiException {
        ApiResponse<InterconnectionList> resp = projectListInterconnectionsWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * List project connections
     * List the connections belonging to the project
     * @param projectId UUID of the project (required)
     * @return ApiResponse&lt;InterconnectionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InterconnectionList> projectListInterconnectionsWithHttpInfo(UUID projectId) throws ApiException {
        com.squareup.okhttp.Call call = projectListInterconnectionsValidateBeforeCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<InterconnectionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List project connections (asynchronously)
     * List the connections belonging to the project
     * @param projectId UUID of the project (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectListInterconnectionsAsync(UUID projectId, final ApiCallback<InterconnectionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectListInterconnectionsValidateBeforeCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InterconnectionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInterconnection
     * @param connectionId Connection UUID (required)
     * @param connection Updated connection details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateInterconnectionCall(UUID connectionId, InterconnectionUpdateInput connection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = connection;

        // create path and map variables
        String localVarPath = "/connections/{connection_id}"
            .replaceAll("\\{" + "connection_id" + "\\}", apiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateInterconnectionValidateBeforeCall(UUID connectionId, InterconnectionUpdateInput connection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling updateInterconnection(Async)");
        }
        
        // verify the required parameter 'connection' is set
        if (connection == null) {
            throw new ApiException("Missing the required parameter 'connection' when calling updateInterconnection(Async)");
        }
        

        com.squareup.okhttp.Call call = updateInterconnectionCall(connectionId, connection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update connection
     * Update the details of a connection
     * @param connectionId Connection UUID (required)
     * @param connection Updated connection details (required)
     * @return Interconnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Interconnection updateInterconnection(UUID connectionId, InterconnectionUpdateInput connection) throws ApiException {
        ApiResponse<Interconnection> resp = updateInterconnectionWithHttpInfo(connectionId, connection);
        return resp.getData();
    }

    /**
     * Update connection
     * Update the details of a connection
     * @param connectionId Connection UUID (required)
     * @param connection Updated connection details (required)
     * @return ApiResponse&lt;Interconnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Interconnection> updateInterconnectionWithHttpInfo(UUID connectionId, InterconnectionUpdateInput connection) throws ApiException {
        com.squareup.okhttp.Call call = updateInterconnectionValidateBeforeCall(connectionId, connection, null, null);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update connection (asynchronously)
     * Update the details of a connection
     * @param connectionId Connection UUID (required)
     * @param connection Updated connection details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateInterconnectionAsync(UUID connectionId, InterconnectionUpdateInput connection, final ApiCallback<Interconnection> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateInterconnectionValidateBeforeCall(connectionId, connection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Interconnection>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateVirtualCircuit
     * @param id Virtual Circuit UUID (required)
     * @param virtualCircuit Updated Virtual Circuit details (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVirtualCircuitCall(UUID id, VirtualCircuitUpdateInput virtualCircuit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = virtualCircuit;

        // create path and map variables
        String localVarPath = "/virtual-circuits/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateVirtualCircuitValidateBeforeCall(UUID id, VirtualCircuitUpdateInput virtualCircuit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateVirtualCircuit(Async)");
        }
        
        // verify the required parameter 'virtualCircuit' is set
        if (virtualCircuit == null) {
            throw new ApiException("Missing the required parameter 'virtualCircuit' when calling updateVirtualCircuit(Async)");
        }
        

        com.squareup.okhttp.Call call = updateVirtualCircuitCall(id, virtualCircuit, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a virtual circuit
     * Update the details of a virtual circuit.
     * @param id Virtual Circuit UUID (required)
     * @param virtualCircuit Updated Virtual Circuit details (required)
     * @return VirtualCircuit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VirtualCircuit updateVirtualCircuit(UUID id, VirtualCircuitUpdateInput virtualCircuit) throws ApiException {
        ApiResponse<VirtualCircuit> resp = updateVirtualCircuitWithHttpInfo(id, virtualCircuit);
        return resp.getData();
    }

    /**
     * Update a virtual circuit
     * Update the details of a virtual circuit.
     * @param id Virtual Circuit UUID (required)
     * @param virtualCircuit Updated Virtual Circuit details (required)
     * @return ApiResponse&lt;VirtualCircuit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VirtualCircuit> updateVirtualCircuitWithHttpInfo(UUID id, VirtualCircuitUpdateInput virtualCircuit) throws ApiException {
        com.squareup.okhttp.Call call = updateVirtualCircuitValidateBeforeCall(id, virtualCircuit, null, null);
        Type localVarReturnType = new TypeToken<VirtualCircuit>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a virtual circuit (asynchronously)
     * Update the details of a virtual circuit.
     * @param id Virtual Circuit UUID (required)
     * @param virtualCircuit Updated Virtual Circuit details (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVirtualCircuitAsync(UUID id, VirtualCircuitUpdateInput virtualCircuit, final ApiCallback<VirtualCircuit> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVirtualCircuitValidateBeforeCall(id, virtualCircuit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VirtualCircuit>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
