/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.ApiCallback;
import net.packet.client.ApiClient;
import net.packet.client.ApiException;
import net.packet.client.ApiResponse;
import net.packet.client.Configuration;
import net.packet.client.Pair;
import net.packet.client.ProgressRequestBody;
import net.packet.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import net.packet.client.model.CreateSelfServiceReservationRequest;
import net.packet.client.model.Error;
import net.packet.client.model.SelfServiceReservationList;
import net.packet.client.model.SelfServiceReservationResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SelfServiceReservationsApi {
    private ApiClient apiClient;

    public SelfServiceReservationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SelfServiceReservationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSelfServiceReservation
     * @param reservation reservation to create (required)
     * @param projectId Project UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSelfServiceReservationCall(CreateSelfServiceReservationRequest reservation, UUID projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = reservation;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/self-service/reservations"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSelfServiceReservationValidateBeforeCall(CreateSelfServiceReservationRequest reservation, UUID projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reservation' is set
        if (reservation == null) {
            throw new ApiException("Missing the required parameter 'reservation' when calling createSelfServiceReservation(Async)");
        }
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling createSelfServiceReservation(Async)");
        }
        

        com.squareup.okhttp.Call call = createSelfServiceReservationCall(reservation, projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a reservation
     * Creates a reservation.
     * @param reservation reservation to create (required)
     * @param projectId Project UUID (required)
     * @return SelfServiceReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelfServiceReservationResponse createSelfServiceReservation(CreateSelfServiceReservationRequest reservation, UUID projectId) throws ApiException {
        ApiResponse<SelfServiceReservationResponse> resp = createSelfServiceReservationWithHttpInfo(reservation, projectId);
        return resp.getData();
    }

    /**
     * Create a reservation
     * Creates a reservation.
     * @param reservation reservation to create (required)
     * @param projectId Project UUID (required)
     * @return ApiResponse&lt;SelfServiceReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelfServiceReservationResponse> createSelfServiceReservationWithHttpInfo(CreateSelfServiceReservationRequest reservation, UUID projectId) throws ApiException {
        com.squareup.okhttp.Call call = createSelfServiceReservationValidateBeforeCall(reservation, projectId, null, null);
        Type localVarReturnType = new TypeToken<SelfServiceReservationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a reservation (asynchronously)
     * Creates a reservation.
     * @param reservation reservation to create (required)
     * @param projectId Project UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSelfServiceReservationAsync(CreateSelfServiceReservationRequest reservation, UUID projectId, final ApiCallback<SelfServiceReservationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSelfServiceReservationValidateBeforeCall(reservation, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelfServiceReservationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findSelfServiceReservation
     * @param id Reservation short_id (required)
     * @param projectId Project UUID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findSelfServiceReservationCall(UUID id, UUID projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/self-service/reservations/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findSelfServiceReservationValidateBeforeCall(UUID id, UUID projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findSelfServiceReservation(Async)");
        }
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling findSelfServiceReservation(Async)");
        }
        

        com.squareup.okhttp.Call call = findSelfServiceReservationCall(id, projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve a reservation
     * Returns a reservation
     * @param id Reservation short_id (required)
     * @param projectId Project UUID (required)
     * @return SelfServiceReservationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelfServiceReservationResponse findSelfServiceReservation(UUID id, UUID projectId) throws ApiException {
        ApiResponse<SelfServiceReservationResponse> resp = findSelfServiceReservationWithHttpInfo(id, projectId);
        return resp.getData();
    }

    /**
     * Retrieve a reservation
     * Returns a reservation
     * @param id Reservation short_id (required)
     * @param projectId Project UUID (required)
     * @return ApiResponse&lt;SelfServiceReservationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelfServiceReservationResponse> findSelfServiceReservationWithHttpInfo(UUID id, UUID projectId) throws ApiException {
        com.squareup.okhttp.Call call = findSelfServiceReservationValidateBeforeCall(id, projectId, null, null);
        Type localVarReturnType = new TypeToken<SelfServiceReservationResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a reservation (asynchronously)
     * Returns a reservation
     * @param id Reservation short_id (required)
     * @param projectId Project UUID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findSelfServiceReservationAsync(UUID id, UUID projectId, final ApiCallback<SelfServiceReservationResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findSelfServiceReservationValidateBeforeCall(id, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelfServiceReservationResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findSelfServiceReservations
     * @param projectId Project UUID (required)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findSelfServiceReservationsCall(UUID projectId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/projects/{project_id}/self-service/reservations"
            .replaceAll("\\{" + "project_id" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findSelfServiceReservationsValidateBeforeCall(UUID projectId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling findSelfServiceReservations(Async)");
        }
        

        com.squareup.okhttp.Call call = findSelfServiceReservationsCall(projectId, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve all reservations
     * Returns all reservations.
     * @param projectId Project UUID (required)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @return SelfServiceReservationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SelfServiceReservationList findSelfServiceReservations(UUID projectId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<SelfServiceReservationList> resp = findSelfServiceReservationsWithHttpInfo(projectId, page, perPage);
        return resp.getData();
    }

    /**
     * Retrieve all reservations
     * Returns all reservations.
     * @param projectId Project UUID (required)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @return ApiResponse&lt;SelfServiceReservationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SelfServiceReservationList> findSelfServiceReservationsWithHttpInfo(UUID projectId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = findSelfServiceReservationsValidateBeforeCall(projectId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<SelfServiceReservationList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all reservations (asynchronously)
     * Returns all reservations.
     * @param projectId Project UUID (required)
     * @param page Page to return (optional, default to 1)
     * @param perPage Items returned per page (optional, default to 10)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findSelfServiceReservationsAsync(UUID projectId, Integer page, Integer perPage, final ApiCallback<SelfServiceReservationList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findSelfServiceReservationsValidateBeforeCall(projectId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SelfServiceReservationList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
