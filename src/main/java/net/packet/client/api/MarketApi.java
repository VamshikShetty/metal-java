/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.ApiCallback;
import net.packet.client.ApiClient;
import net.packet.client.ApiException;
import net.packet.client.ApiResponse;
import net.packet.client.Configuration;
import net.packet.client.Pair;
import net.packet.client.ProgressRequestBody;
import net.packet.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import net.packet.client.model.SpotMarketPricesList;
import net.packet.client.model.SpotMarketPricesPerMetroList;
import net.packet.client.model.SpotPricesHistoryReport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketApi {
    private ApiClient apiClient;

    public MarketApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for findMetroSpotMarketPrices
     * @param metro Metro to filter spot market prices (optional)
     * @param plan Plan to filter spot market prices (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findMetroSpotMarketPricesCall(String metro, String plan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/market/spot/prices/metros";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (metro != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metro", metro));
        if (plan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plan", plan));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findMetroSpotMarketPricesValidateBeforeCall(String metro, String plan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = findMetroSpotMarketPricesCall(metro, plan, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get current spot market prices for metros
     * Get Equinix Metal current spot market prices for all metros.
     * @param metro Metro to filter spot market prices (optional)
     * @param plan Plan to filter spot market prices (optional)
     * @return SpotMarketPricesPerMetroList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpotMarketPricesPerMetroList findMetroSpotMarketPrices(String metro, String plan) throws ApiException {
        ApiResponse<SpotMarketPricesPerMetroList> resp = findMetroSpotMarketPricesWithHttpInfo(metro, plan);
        return resp.getData();
    }

    /**
     * Get current spot market prices for metros
     * Get Equinix Metal current spot market prices for all metros.
     * @param metro Metro to filter spot market prices (optional)
     * @param plan Plan to filter spot market prices (optional)
     * @return ApiResponse&lt;SpotMarketPricesPerMetroList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpotMarketPricesPerMetroList> findMetroSpotMarketPricesWithHttpInfo(String metro, String plan) throws ApiException {
        com.squareup.okhttp.Call call = findMetroSpotMarketPricesValidateBeforeCall(metro, plan, null, null);
        Type localVarReturnType = new TypeToken<SpotMarketPricesPerMetroList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current spot market prices for metros (asynchronously)
     * Get Equinix Metal current spot market prices for all metros.
     * @param metro Metro to filter spot market prices (optional)
     * @param plan Plan to filter spot market prices (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findMetroSpotMarketPricesAsync(String metro, String plan, final ApiCallback<SpotMarketPricesPerMetroList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findMetroSpotMarketPricesValidateBeforeCall(metro, plan, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpotMarketPricesPerMetroList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findSpotMarketPrices
     * @param facility Facility to check spot market prices (optional)
     * @param plan Plan to check spot market prices (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findSpotMarketPricesCall(String facility, String plan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/market/spot/prices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (facility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility", facility));
        if (plan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plan", plan));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findSpotMarketPricesValidateBeforeCall(String facility, String plan, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = findSpotMarketPricesCall(facility, plan, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get current spot market prices
     * Get Equinix Metal current spot market prices.
     * @param facility Facility to check spot market prices (optional)
     * @param plan Plan to check spot market prices (optional)
     * @return SpotMarketPricesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpotMarketPricesList findSpotMarketPrices(String facility, String plan) throws ApiException {
        ApiResponse<SpotMarketPricesList> resp = findSpotMarketPricesWithHttpInfo(facility, plan);
        return resp.getData();
    }

    /**
     * Get current spot market prices
     * Get Equinix Metal current spot market prices.
     * @param facility Facility to check spot market prices (optional)
     * @param plan Plan to check spot market prices (optional)
     * @return ApiResponse&lt;SpotMarketPricesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpotMarketPricesList> findSpotMarketPricesWithHttpInfo(String facility, String plan) throws ApiException {
        com.squareup.okhttp.Call call = findSpotMarketPricesValidateBeforeCall(facility, plan, null, null);
        Type localVarReturnType = new TypeToken<SpotMarketPricesList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current spot market prices (asynchronously)
     * Get Equinix Metal current spot market prices.
     * @param facility Facility to check spot market prices (optional)
     * @param plan Plan to check spot market prices (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findSpotMarketPricesAsync(String facility, String plan, final ApiCallback<SpotMarketPricesList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findSpotMarketPricesValidateBeforeCall(facility, plan, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpotMarketPricesList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for findSpotMarketPricesHistory
     * @param facility Facility to check spot market prices (required)
     * @param plan Plan to check spot market prices (required)
     * @param from Timestamp from range (required)
     * @param until Timestamp to range (required)
     * @param metro Metro to check spot market price history (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call findSpotMarketPricesHistoryCall(String facility, String plan, String from, String until, String metro, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/market/spot/prices/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (facility != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("facility", facility));
        if (plan != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plan", plan));
        if (metro != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metro", metro));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (until != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("until", until));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x_auth_token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call findSpotMarketPricesHistoryValidateBeforeCall(String facility, String plan, String from, String until, String metro, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'facility' is set
        if (facility == null) {
            throw new ApiException("Missing the required parameter 'facility' when calling findSpotMarketPricesHistory(Async)");
        }
        
        // verify the required parameter 'plan' is set
        if (plan == null) {
            throw new ApiException("Missing the required parameter 'plan' when calling findSpotMarketPricesHistory(Async)");
        }
        
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling findSpotMarketPricesHistory(Async)");
        }
        
        // verify the required parameter 'until' is set
        if (until == null) {
            throw new ApiException("Missing the required parameter 'until' when calling findSpotMarketPricesHistory(Async)");
        }
        

        com.squareup.okhttp.Call call = findSpotMarketPricesHistoryCall(facility, plan, from, until, metro, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get spot market prices for a given period of time
     * Get spot market prices for a given plan and facility in a fixed period of time  *Note: In the &#x60;200&#x60; response, the property &#x60;datapoints&#x60; contains arrays of &#x60;[float, integer]&#x60;.*
     * @param facility Facility to check spot market prices (required)
     * @param plan Plan to check spot market prices (required)
     * @param from Timestamp from range (required)
     * @param until Timestamp to range (required)
     * @param metro Metro to check spot market price history (optional)
     * @return SpotPricesHistoryReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpotPricesHistoryReport findSpotMarketPricesHistory(String facility, String plan, String from, String until, String metro) throws ApiException {
        ApiResponse<SpotPricesHistoryReport> resp = findSpotMarketPricesHistoryWithHttpInfo(facility, plan, from, until, metro);
        return resp.getData();
    }

    /**
     * Get spot market prices for a given period of time
     * Get spot market prices for a given plan and facility in a fixed period of time  *Note: In the &#x60;200&#x60; response, the property &#x60;datapoints&#x60; contains arrays of &#x60;[float, integer]&#x60;.*
     * @param facility Facility to check spot market prices (required)
     * @param plan Plan to check spot market prices (required)
     * @param from Timestamp from range (required)
     * @param until Timestamp to range (required)
     * @param metro Metro to check spot market price history (optional)
     * @return ApiResponse&lt;SpotPricesHistoryReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpotPricesHistoryReport> findSpotMarketPricesHistoryWithHttpInfo(String facility, String plan, String from, String until, String metro) throws ApiException {
        com.squareup.okhttp.Call call = findSpotMarketPricesHistoryValidateBeforeCall(facility, plan, from, until, metro, null, null);
        Type localVarReturnType = new TypeToken<SpotPricesHistoryReport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get spot market prices for a given period of time (asynchronously)
     * Get spot market prices for a given plan and facility in a fixed period of time  *Note: In the &#x60;200&#x60; response, the property &#x60;datapoints&#x60; contains arrays of &#x60;[float, integer]&#x60;.*
     * @param facility Facility to check spot market prices (required)
     * @param plan Plan to check spot market prices (required)
     * @param from Timestamp from range (required)
     * @param until Timestamp to range (required)
     * @param metro Metro to check spot market price history (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call findSpotMarketPricesHistoryAsync(String facility, String plan, String from, String until, String metro, final ApiCallback<SpotPricesHistoryReport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = findSpotMarketPricesHistoryValidateBeforeCall(facility, plan, from, until, metro, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpotPricesHistoryReport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
