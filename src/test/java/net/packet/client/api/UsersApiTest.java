/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.model.Error;
import net.packet.client.model.InvitationList;
import java.util.UUID;
import net.packet.client.model.User;
import net.packet.client.model.UserCreateInput;
import net.packet.client.model.UserList;
import net.packet.client.model.UserUpdateInput;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Create a user
     *
     * Creates a user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws Exception {
        UserCreateInput user = null;
        User response = api.createUser(user);

        // TODO: test validations
    }
    
    /**
     * Retrieve the current user
     *
     * Returns the user object for the currently logged-in user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findCurrentUserTest() throws Exception {
        List<String> include = null;
        List<String> exclude = null;
        User response = api.findCurrentUser(include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve current user invitations
     *
     * Returns all invitations in current user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findInvitationsTest() throws Exception {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findInvitations(include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve a user
     *
     * Returns a single user if the user has access
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findUserByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        User response = api.findUserById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of a user
     *
     * Provides the custom metadata stored for this user in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findUserCustomdataTest() throws Exception {
        UUID id = null;
        api.findUserCustomdata(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all users
     *
     * Returns a list of users that the are accessible to the current user (all users in the current userâ€™s projects, essentially).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findUsersTest() throws Exception {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        UserList response = api.findUsers(include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Update the current user
     *
     * Updates the currently logged-in user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCurrentUserTest() throws Exception {
        UserUpdateInput user = null;
        User response = api.updateCurrentUser(user);

        // TODO: test validations
    }
    
}
