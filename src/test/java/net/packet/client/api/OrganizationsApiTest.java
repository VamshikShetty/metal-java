/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.model.CapacityList;
import net.packet.client.model.DeviceList;
import net.packet.client.model.Error;
import net.packet.client.model.EventList;
import net.packet.client.model.FacilityList;
import net.packet.client.model.Invitation;
import net.packet.client.model.InvitationInput;
import net.packet.client.model.InvitationList;
import net.packet.client.model.MetroCapacityList;
import net.packet.client.model.OperatingSystemList;
import net.packet.client.model.Organization;
import net.packet.client.model.OrganizationInput;
import net.packet.client.model.OrganizationList;
import net.packet.client.model.PaymentMethod;
import net.packet.client.model.PaymentMethodCreateInput;
import net.packet.client.model.PaymentMethodList;
import net.packet.client.model.PlanList;
import net.packet.client.model.Project;
import net.packet.client.model.ProjectCreateInput;
import net.packet.client.model.ProjectList;
import net.packet.client.model.TransferRequestList;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Ignore
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    
    /**
     * Create an organization
     *
     * Creates an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws Exception {
        OrganizationInput organization = null;
        Organization response = api.createOrganization(organization);

        // TODO: test validations
    }
    
    /**
     * Create an invitation for an organization
     *
     * In order to add a user to an organization, they must first be invited. To invite to several projects the parameter &#x60;projects_ids:[a,b,c]&#x60; can be used
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationInvitationTest() throws Exception {
        UUID id = null;
        InvitationInput invitation = null;
        Invitation response = api.createOrganizationInvitation(id, invitation);

        // TODO: test validations
    }
    
    /**
     * Create a project for the organization
     *
     * Creates a new project for the organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationProjectTest() throws Exception {
        UUID id = null;
        ProjectCreateInput project = null;
        Project response = api.createOrganizationProject(id, project);

        // TODO: test validations
    }
    
    /**
     * Create a payment method for the given organization
     *
     * Creates a payment method.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPaymentMethodTest() throws Exception {
        UUID id = null;
        PaymentMethodCreateInput paymentMethod = null;
        PaymentMethod response = api.createPaymentMethod(id, paymentMethod);

        // TODO: test validations
    }
    
    /**
     * Delete the organization
     *
     * Deletes the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws Exception {
        UUID id = null;
        api.deleteOrganization(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all facilities visible by the organization
     *
     * Returns a listing of available datacenters for the given organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findFacilitiesByOrganizationTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        FacilityList response = api.findFacilitiesByOrganization(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all operating systems visible by the organization
     *
     * Returns a listing of available operating systems for the given organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOperatingSystemsByOrganizationTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        OperatingSystemList response = api.findOperatingSystemsByOrganization(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve an organization&#39;s details
     *
     * Returns a single organization&#39;s details, if the user is authorized to view it.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Organization response = api.findOrganizationById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * View available hardware plans per Facility for given organization
     *
     * Returns a list of facilities and plans with their current capacity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationCapacityPerFacilityTest() throws Exception {
        UUID id = null;
        CapacityList response = api.findOrganizationCapacityPerFacility(id);

        // TODO: test validations
    }
    
    /**
     * View available hardware plans per Metro for given organization
     *
     * Returns a list of metros and plans with their current capacity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationCapacityPerMetroTest() throws Exception {
        UUID id = null;
        MetroCapacityList response = api.findOrganizationCapacityPerMetro(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of an organization
     *
     * Provides the custom metadata stored for this organization in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationCustomdataTest() throws Exception {
        UUID id = null;
        api.findOrganizationCustomdata(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all devices of an organization
     *
     * Provides a collection of devices for a given organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationDevicesTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        DeviceList response = api.findOrganizationDevices(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve organization&#39;s events
     *
     * Returns a list of events for a single organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationEventsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        EventList response = api.findOrganizationEvents(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve organization invitations
     *
     * Returns all invitations in an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationInvitationsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findOrganizationInvitations(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all payment methods of an organization
     *
     * Returns all payment methods of an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPaymentMethodsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        PaymentMethodList response = api.findOrganizationPaymentMethods(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all projects of an organization
     *
     * Returns a collection of projects that belong to the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationProjectsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        ProjectList response = api.findOrganizationProjects(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all project transfer requests from or to an organization
     *
     * Provides a collection of project transfer requests from or to the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationTransfersTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        TransferRequestList response = api.findOrganizationTransfers(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all organizations
     *
     * Returns a list of organizations that are accessible to the current user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationsTest() throws Exception {
        String personal = null;
        String withoutProjects = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        OrganizationList response = api.findOrganizations(personal, withoutProjects, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all plans visible by the organization
     *
     * Returns a listing of available plans for the given organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findPlansByOrganizationTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        PlanList response = api.findPlansByOrganization(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Update the organization
     *
     * Updates the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws Exception {
        UUID id = null;
        OrganizationInput organization = null;
        Organization response = api.updateOrganization(id, organization);

        // TODO: test validations
    }
    
}
