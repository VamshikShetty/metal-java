/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.model.Error;
import net.packet.client.model.Event;
import net.packet.client.model.Interconnection;
import net.packet.client.model.InterconnectionCreateInput;
import net.packet.client.model.InterconnectionList;
import net.packet.client.model.InterconnectionPort;
import net.packet.client.model.InterconnectionPortList;
import net.packet.client.model.InterconnectionUpdateInput;
import java.util.UUID;
import net.packet.client.model.VirtualCircuit;
import net.packet.client.model.VirtualCircuitCreateInput;
import net.packet.client.model.VirtualCircuitList;
import net.packet.client.model.VirtualCircuitUpdateInput;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionsApi
 */
@Ignore
public class ConnectionsApiTest {

    private final ConnectionsApi api = new ConnectionsApi();

    
    /**
     * Create a new Virtual Circuit
     *
     * Create a new Virtual Circuit on a dedicated connection using a Virtual Network record and an NNI VLAN value.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createConnectionPortVirtualCircuitTest() throws Exception {
        UUID connectionId = null;
        UUID portId = null;
        VirtualCircuitCreateInput virtualCircuit = null;
        VirtualCircuitList response = api.createConnectionPortVirtualCircuit(connectionId, portId, virtualCircuit);

        // TODO: test validations
    }
    
    /**
     * Request a new connection for the organization
     *
     * Creates a new connection request. A Project ID must be specified in the request body for connections on shared ports.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationInterconnectionTest() throws Exception {
        UUID organizationId = null;
        InterconnectionCreateInput connection = null;
        Interconnection response = api.createOrganizationInterconnection(organizationId, connection);

        // TODO: test validations
    }
    
    /**
     * Request a new connection for the project&#39;s organization
     *
     * Creates a new connection request
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectInterconnectionTest() throws Exception {
        UUID projectId = null;
        InterconnectionCreateInput connection = null;
        Interconnection response = api.createProjectInterconnection(projectId, connection);

        // TODO: test validations
    }
    
    /**
     * Delete connection
     *
     * Delete a connection, its associated ports and virtual circuits.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteInterconnectionTest() throws Exception {
        UUID connectionId = null;
        Interconnection response = api.deleteInterconnection(connectionId);

        // TODO: test validations
    }
    
    /**
     * Delete a virtual circuit
     *
     * Delete a virtual circuit from a dedicated port.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteVirtualCircuitTest() throws Exception {
        UUID id = null;
        VirtualCircuit response = api.deleteVirtualCircuit(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection events
     *
     * Returns a list of the connection events
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findConnectionEventsTest() throws Exception {
        UUID connectionId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        Event response = api.findConnectionEvents(connectionId, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection port events
     *
     * Returns a list of the connection port events
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findConnectionPortEventsTest() throws Exception {
        UUID connectionId = null;
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        Event response = api.findConnectionPortEvents(connectionId, id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection events
     *
     * Returns a list of the virtual circuit events
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findVirtualCircuitEventsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        Event response = api.findVirtualCircuitEvents(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Get a connection port
     *
     * Get the details of an connection port.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectionPortTest() throws Exception {
        UUID connectionId = null;
        UUID id = null;
        InterconnectionPort response = api.getConnectionPort(connectionId, id);

        // TODO: test validations
    }
    
    /**
     * Get connection
     *
     * Get the details of a connection
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getInterconnectionTest() throws Exception {
        UUID connectionId = null;
        Interconnection response = api.getInterconnection(connectionId);

        // TODO: test validations
    }
    
    /**
     * Get a virtual circuit
     *
     * Get the details of a virtual circuit
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVirtualCircuitTest() throws Exception {
        UUID id = null;
        VirtualCircuit response = api.getVirtualCircuit(id);

        // TODO: test validations
    }
    
    /**
     * List a connection port&#39;s virtual circuits
     *
     * List the virtual circuit record(s) associatiated with a particular connection port.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listConnectionPortVirtualCircuitsTest() throws Exception {
        UUID connectionId = null;
        UUID portId = null;
        VirtualCircuitList response = api.listConnectionPortVirtualCircuits(connectionId, portId);

        // TODO: test validations
    }
    
    /**
     * List a connection&#39;s ports
     *
     * List the ports associated to an connection.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listConnectionPortsTest() throws Exception {
        UUID connectionId = null;
        InterconnectionPortList response = api.listConnectionPorts(connectionId);

        // TODO: test validations
    }
    
    /**
     * List organization connections
     *
     * List the connections belonging to the organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void organizationListInterconnectionsTest() throws Exception {
        UUID organizationId = null;
        InterconnectionList response = api.organizationListInterconnections(organizationId);

        // TODO: test validations
    }
    
    /**
     * List project connections
     *
     * List the connections belonging to the project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void projectListInterconnectionsTest() throws Exception {
        UUID projectId = null;
        InterconnectionList response = api.projectListInterconnections(projectId);

        // TODO: test validations
    }
    
    /**
     * Update connection
     *
     * Update the details of a connection
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateInterconnectionTest() throws Exception {
        UUID connectionId = null;
        InterconnectionUpdateInput connection = null;
        Interconnection response = api.updateInterconnection(connectionId, connection);

        // TODO: test validations
    }
    
    /**
     * Update a virtual circuit
     *
     * Update the details of a virtual circuit.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateVirtualCircuitTest() throws Exception {
        UUID id = null;
        VirtualCircuitUpdateInput virtualCircuit = null;
        VirtualCircuit response = api.updateVirtualCircuit(id, virtualCircuit);

        // TODO: test validations
    }
    
}
