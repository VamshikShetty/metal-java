/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.model.Error;
import net.packet.client.model.Invitation;
import net.packet.client.model.InvitationInput;
import net.packet.client.model.InvitationList;
import net.packet.client.model.Membership;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvitationsApi
 */
@Ignore
public class InvitationsApiTest {

    private final InvitationsApi api = new InvitationsApi();

    
    /**
     * Accept an invitation
     *
     * Accept an invitation.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void acceptInvitationTest() throws Exception {
        UUID id = null;
        Membership response = api.acceptInvitation(id);

        // TODO: test validations
    }
    
    /**
     * Create an invitation for an organization
     *
     * In order to add a user to an organization, they must first be invited. To invite to several projects the parameter &#x60;projects_ids:[a,b,c]&#x60; can be used
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationInvitationTest() throws Exception {
        UUID id = null;
        InvitationInput invitation = null;
        Invitation response = api.createOrganizationInvitation(id, invitation);

        // TODO: test validations
    }
    
    /**
     * Create an invitation for a project
     *
     * In order to add a user to a project, they must first be invited.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectInvitationTest() throws Exception {
        UUID projectId = null;
        InvitationInput invitation = null;
        Invitation response = api.createProjectInvitation(projectId, invitation);

        // TODO: test validations
    }
    
    /**
     * Decline an invitation
     *
     * Decline an invitation.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void declineInvitationTest() throws Exception {
        UUID id = null;
        api.declineInvitation(id);

        // TODO: test validations
    }
    
    /**
     * View an invitation
     *
     * Returns a single invitation. (It include the &#x60;invitable&#x60; to maintain backward compatibility but will be removed soon)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findInvitationByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Invitation response = api.findInvitationById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve current user invitations
     *
     * Returns all invitations in current user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findInvitationsTest() throws Exception {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findInvitations(include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve organization invitations
     *
     * Returns all invitations in an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationInvitationsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findOrganizationInvitations(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve project invitations
     *
     * Returns all invitations in a project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectInvitationsTest() throws Exception {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findProjectInvitations(projectId, include, exclude, page, perPage);

        // TODO: test validations
    }
    
}
