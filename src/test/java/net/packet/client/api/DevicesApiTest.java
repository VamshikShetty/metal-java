/**
 * Packet API
 * This is the API for Packet. Interact with your devices, user account, and projects.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: help@packet.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package net.packet.client.api;

import net.packet.client.ApiException;
import net.packet.client.model.DeviceCreateInput;
import net.packet.client.model.Device;
import net.packet.client.model.DeviceList;
import net.packet.client.model.DeviceUpdateInput;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    
    /**
     * Create a device
     *
     * Creates a new device and provisions it in our datacenter.  Type-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.  The features attribute allows you to optionally specify what features your server should have. For example, if you require a server with a TPM chip, you may specify { \&quot;features\&quot;: { \&quot;tpm\&quot;: \&quot;required\&quot; } } (or { \&quot;features\&quot;: [\&quot;tpm\&quot;] } in shorthand). The request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below). The request will not fail if we have no servers with that feature in our inventory.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDeviceTest() throws ApiException {
        String id = null;
        DeviceCreateInput device = null;
        // Device response = api.createDevice(id, device);

        // TODO: test validations
    }
    
    /**
     * Delete the device
     *
     * Deletes a device and deprovisions it in our datacenter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        String id = null;
        // api.deleteDevice(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a device
     *
     * Type-specific options (such as facility for baremetal devices) will be included as part of the main data structure.  state value can be one of: active inactive queued or provisioning
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findDeviceByIdTest() throws ApiException {
        String id = null;
        String include = null;
        // Device response = api.findDeviceById(id, include);

        // TODO: test validations
    }
    
    /**
     * Retrieve all devices
     *
     * Provides a collection of devices for a given project.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findDevicesTest() throws ApiException {
        String id = null;
        String include = null;
        Integer page = null;
        Integer perPage = null;
        // DeviceList response = api.findDevices(id, include, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Update the device
     *
     * Updates the device.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        String id = null;
        DeviceUpdateInput device = null;
        // Device response = api.updateDevice(id, device);

        // TODO: test validations
    }
    
}
