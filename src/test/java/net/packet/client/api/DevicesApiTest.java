/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.model.BGPSessionInput;
import net.packet.client.model.BatchesList;
import net.packet.client.model.BgpSession;
import net.packet.client.model.BgpSessionList;
import net.packet.client.model.BgpSessionNeighbors;
import net.packet.client.model.Device;
import net.packet.client.model.DeviceCreateInput;
import net.packet.client.model.DeviceList;
import net.packet.client.model.DeviceUpdateInput;
import net.packet.client.model.DeviceUsageList;
import net.packet.client.model.Error;
import net.packet.client.model.EventList;
import net.packet.client.model.IPAssignment;
import net.packet.client.model.IPAssignmentInput;
import net.packet.client.model.IPAssignmentList;
import net.packet.client.model.InstancesBatchCreateInput;
import net.packet.client.model.ProjectUsageList;
import net.packet.client.model.Timeframe;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Ignore
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    
    /**
     * Create a BGP session
     *
     * Creates a BGP session.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createBgpSessionTest() throws Exception {
        UUID id = null;
        BGPSessionInput bgpSession = null;
        BgpSession response = api.createBgpSession(id, bgpSession);

        // TODO: test validations
    }
    
    /**
     * Create a device
     *
     * Creates a new device and provisions it in the specified location.        Device type-specific options are accepted.  For example, &#x60;baremetal&#x60; devices accept &#x60;operating_system&#x60;, &#x60;hostname&#x60;, and &#x60;plan&#x60;. These parameters may not be accepted for other device types. The default device type is &#x60;baremetal&#x60;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDeviceTest() throws Exception {
        UUID id = null;
        DeviceCreateInput device = null;
        Device response = api.createDevice(id, device);

        // TODO: test validations
    }
    
    /**
     * Create a devices batch
     *
     * Creates new devices in batch and provisions them in our datacenter.  Type-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.  The features attribute allows you to optionally specify what features your server should have.  For example, if you require a server with a TPM chip, you may specify &#x60;{ \&quot;features\&quot;: { \&quot;tpm\&quot;: \&quot;required\&quot; } }&#x60; (or &#x60;{ \&quot;features\&quot;: [\&quot;tpm\&quot;] }&#x60; in shorthand).  The request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).  The request will not fail if we have no servers with that feature in our inventory.  The facilities attribute specifies in what datacenter you wish to create the device.  You can either specify a single facility &#x60;{ \&quot;facility\&quot;: \&quot;f1\&quot; }&#x60; , or you can instruct to create the device in the best available datacenter &#x60;{ \&quot;facility\&quot;: \&quot;any\&quot; }&#x60;. Additionally it is possible to set a prioritized location selection.  For example &#x60;{ \&quot;facility\&quot;: [\&quot;f3\&quot;, \&quot;f2\&quot;, \&quot;any\&quot;] }&#x60; will try to assign to the facility f3, if there are no available f2, and so on. If \&quot;any\&quot; is not specified for \&quot;facility\&quot;, the request will fail unless it can assign in the selected locations.  With &#x60;{ \&quot;facility\&quot;: \&quot;any\&quot; }&#x60; you have the option to diversify to indicate how many facilities you are willing to be spread across. For this purpose use parameter: &#x60;facility_diversity_level &#x3D; N&#x60;.  For example:  &#x60;{ \&quot;facilities\&quot;: [\&quot;sjc1\&quot;, \&quot;ewr1\&quot;, \&quot;any\&quot;] ,  \&quot;facility_diversity_level\&quot; &#x3D; 1, \&quot;quantity\&quot; &#x3D; 10 }&#x60; will assign 10 devices into the same facility, trying first in \&quot;sjc1\&quot;, and if there arenâ€™t available, it will try in  \&quot;ewr1\&quot;, otherwise any other.  The &#x60;ip_addresses&#x60; attribute will allow you to specify the addresses you want created with your device.  To maintain backwards compatibility, If the attribute is not sent in the request, it will be treated as if &#x60;{ \&quot;ip_addresses\&quot;: [{ \&quot;address_family\&quot;: 4, \&quot;public\&quot;: true }, { \&quot;address_family\&quot;: 4, \&quot;public\&quot;: false }, { \&quot;address_family\&quot;: 6, \&quot;public\&quot;: true }] }&#x60; was sent.  The private IPv4 address is required and always need to be sent in the array. Not all operating systems support no public IPv4 address, so in those cases you will receive an error message.  For example, to only configure your server with a private IPv4 address, you can send &#x60;{ \&quot;ip_addresses\&quot;: [{ \&quot;address_family\&quot;: 4, \&quot;public\&quot;: false }] }&#x60;.  Note: when specifying a subnet size larger than a /30, you will need to supply the UUID(s) of existing ip_reservations in your project to assign IPs from.  For example, &#x60;{ \&quot;ip_addresses\&quot;: [..., {\&quot;address_family\&quot;: 4, \&quot;public\&quot;: true, \&quot;ip_reservations\&quot;: [\&quot;uuid1\&quot;, \&quot;uuid2\&quot;]}] }&#x60;  To access a server without public IPs, you can use our Out-of-Band console access (SOS) or use another server with public IPs as a proxy.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDeviceBatchTest() throws Exception {
        UUID id = null;
        InstancesBatchCreateInput batch = null;
        BatchesList response = api.createDeviceBatch(id, batch);

        // TODO: test validations
    }
    
    /**
     * Create an ip assignment
     *
     * Creates an ip assignment for a device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createIPAssignmentTest() throws Exception {
        UUID id = null;
        IPAssignmentInput ipAssignment = null;
        IPAssignment response = api.createIPAssignment(id, ipAssignment);

        // TODO: test validations
    }
    
    /**
     * Delete the device
     *
     * Deletes a device and deprovisions it in our datacenter.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws Exception {
        UUID id = null;
        Boolean forceDelete = null;
        api.deleteDevice(id, forceDelete);

        // TODO: test validations
    }
    
    /**
     * Retrieve all BGP sessions
     *
     * Provides a listing of available BGP sessions for the device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findBgpSessionsTest() throws Exception {
        UUID id = null;
        BgpSessionList response = api.findBgpSessions(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a device
     *
     * Type-specific options (such as facility for baremetal devices) will be included as part of the main data structure.                          State value can be one of: active inactive queued or provisioning
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDeviceByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Device response = api.findDeviceById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of an instance
     *
     * Provides the custom metadata stored for this instance in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDeviceCustomdataTest() throws Exception {
        UUID id = null;
        api.findDeviceCustomdata(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve device&#39;s events
     *
     * Returns a list of events pertaining to a specific device
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDeviceEventsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        EventList response = api.findDeviceEvents(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all usages for device
     *
     * Returns all usages for a device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDeviceUsagesTest() throws Exception {
        UUID id = null;
        String createdAfter = null;
        String createdBefore = null;
        DeviceUsageList response = api.findDeviceUsages(id, createdAfter, createdBefore);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of an IP Assignment
     *
     * Provides the custom metadata stored for this IP Assignment in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findIPAssignmentCustomdataTest() throws Exception {
        UUID instanceId = null;
        UUID id = null;
        api.findIPAssignmentCustomdata(instanceId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all ip assignments
     *
     * Returns all ip assignments for a device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findIPAssignmentsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        IPAssignmentList response = api.findIPAssignments(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve an instance bandwidth
     *
     * Retrieve an instance bandwidth for a given period of time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findInstanceBandwidthTest() throws Exception {
        UUID id = null;
        String from = null;
        String until = null;
        api.findInstanceBandwidth(id, from, until);

        // TODO: test validations
    }
    
    /**
     * Retrieve all devices of an organization
     *
     * Provides a collection of devices for a given organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationDevicesTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        DeviceList response = api.findOrganizationDevices(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all devices of a project
     *
     * Provides a collection of devices for a given project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectDevicesTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        DeviceList response = api.findProjectDevices(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all usages for project
     *
     * Returns all usages for a project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectUsageTest() throws Exception {
        UUID id = null;
        String createdAfter = null;
        String createdBefore = null;
        ProjectUsageList response = api.findProjectUsage(id, createdAfter, createdBefore);

        // TODO: test validations
    }
    
    /**
     * Retrieve device traffic
     *
     * Returns traffic for a specific device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findTrafficTest() throws Exception {
        UUID id = null;
        String direction = null;
        Timeframe timeframe = null;
        String interval = null;
        String bucket = null;
        api.findTraffic(id, direction, timeframe, interval, bucket);

        // TODO: test validations
    }
    
    /**
     * Retrieve BGP neighbor data for this device
     *
     * Provides a summary of the BGP neighbor data associated to the BGP sessions for this device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBgpNeighborDataTest() throws Exception {
        UUID id = null;
        BgpSessionNeighbors response = api.getBgpNeighborData(id);

        // TODO: test validations
    }
    
    /**
     * Perform an action
     *
     * Performs an action for the given device.  Possible actions include: power_on, power_off, reboot, reinstall, and rescue (reboot the device into rescue OS.)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void performActionTest() throws Exception {
        UUID id = null;
        String type = null;
        api.performAction(id, type);

        // TODO: test validations
    }
    
    /**
     * Update the device
     *
     * Updates the device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws Exception {
        UUID id = null;
        DeviceUpdateInput device = null;
        Device response = api.updateDevice(id, device);

        // TODO: test validations
    }
    
}
