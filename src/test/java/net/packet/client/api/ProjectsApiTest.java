/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package net.packet.client.api;

import net.packet.client.model.BatchesList;
import net.packet.client.model.BgpConfig;
import net.packet.client.model.BgpConfigRequestInput;
import net.packet.client.model.BgpSessionList;
import net.packet.client.model.Device;
import net.packet.client.model.DeviceCreateInput;
import net.packet.client.model.DeviceList;
import net.packet.client.model.Error;
import net.packet.client.model.EventList;
import net.packet.client.model.FacilityList;
import net.packet.client.model.GlobalBgpRangeList;
import net.packet.client.model.HardwareReservationList;
import net.packet.client.model.IPReservation;
import net.packet.client.model.IPReservationList;
import net.packet.client.model.IPReservationRequestInput;
import net.packet.client.model.Invitation;
import net.packet.client.model.InvitationInput;
import net.packet.client.model.InvitationList;
import net.packet.client.model.License;
import net.packet.client.model.LicenseCreateInput;
import net.packet.client.model.LicenseList;
import net.packet.client.model.MembershipList;
import net.packet.client.model.PlanList;
import net.packet.client.model.Project;
import net.packet.client.model.ProjectCreateFromRootInput;
import net.packet.client.model.ProjectCreateInput;
import net.packet.client.model.ProjectList;
import net.packet.client.model.ProjectUpdateInput;
import net.packet.client.model.SSHKey;
import net.packet.client.model.SSHKeyCreateInput;
import net.packet.client.model.SSHKeyList;
import net.packet.client.model.SpotMarketRequest;
import net.packet.client.model.SpotMarketRequestCreateInput;
import net.packet.client.model.SpotMarketRequestList;
import net.packet.client.model.TransferRequest;
import net.packet.client.model.TransferRequestInput;
import java.util.UUID;
import net.packet.client.model.VirtualNetwork;
import net.packet.client.model.VirtualNetworkCreateInput;
import net.packet.client.model.VirtualNetworkList;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Ignore
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    
    /**
     * Create a device
     *
     * Creates a new device and provisions it in the specified location.        Device type-specific options are accepted.  For example, &#x60;baremetal&#x60; devices accept &#x60;operating_system&#x60;, &#x60;hostname&#x60;, and &#x60;plan&#x60;. These parameters may not be accepted for other device types. The default device type is &#x60;baremetal&#x60;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDeviceTest() throws Exception {
        UUID id = null;
        DeviceCreateInput device = null;
        Device response = api.createDevice(id, device);

        // TODO: test validations
    }
    
    /**
     * Create a License
     *
     * Creates a new license for the given project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createLicenseTest() throws Exception {
        UUID id = null;
        LicenseCreateInput license = null;
        License response = api.createLicense(id, license);

        // TODO: test validations
    }
    
    /**
     * Create a project for the organization
     *
     * Creates a new project for the organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationProjectTest() throws Exception {
        UUID id = null;
        ProjectCreateInput project = null;
        Project response = api.createOrganizationProject(id, project);

        // TODO: test validations
    }
    
    /**
     * Create a project
     *
     * Creates a new project for the user default organization. If the user don&#39;t have an organization, a new one will be created.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws Exception {
        ProjectCreateFromRootInput project = null;
        Project response = api.createProject(project);

        // TODO: test validations
    }
    
    /**
     * Create an invitation for a project
     *
     * In order to add a user to a project, they must first be invited.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectInvitationTest() throws Exception {
        UUID projectId = null;
        InvitationInput invitation = null;
        Invitation response = api.createProjectInvitation(projectId, invitation);

        // TODO: test validations
    }
    
    /**
     * Create a ssh key for the given project
     *
     * Creates a ssh key.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectSSHKeyTest() throws Exception {
        UUID id = null;
        SSHKeyCreateInput sshKey = null;
        SSHKey response = api.createProjectSSHKey(id, sshKey);

        // TODO: test validations
    }
    
    /**
     * Create a spot market request
     *
     * Creates a new spot market request.  Type-specific options (such as operating_system for baremetal devices) should be included in the main data structure alongside hostname and plan.  The features attribute allows you to optionally specify what features your server should have. For example, if you require a server with a TPM chip, you may specify &#x60;{ \&quot;features\&quot;: { \&quot;tpm\&quot;: \&quot;required\&quot; } }&#x60; (or &#x60;{ \&quot;features\&quot;: [\&quot;tpm\&quot;] }&#x60; in shorthand).  The request will fail if there are no available servers matching your criteria. Alternatively, if you do not require a certain feature, but would prefer to be assigned a server with that feature if there are any available, you may specify that feature with a preferred value (see the example request below).  The request will not fail if we have no servers with that feature in our inventory.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createSpotMarketRequestTest() throws Exception {
        UUID id = null;
        SpotMarketRequestCreateInput spotMarketRequest = null;
        SpotMarketRequest response = api.createSpotMarketRequest(id, spotMarketRequest);

        // TODO: test validations
    }
    
    /**
     * Create a transfer request
     *
     * Organization owners can transfer their projects to other organizations.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTransferRequestTest() throws Exception {
        UUID id = null;
        TransferRequestInput transferRequest = null;
        TransferRequest response = api.createTransferRequest(id, transferRequest);

        // TODO: test validations
    }
    
    /**
     * Create a virtual network
     *
     * Creates an virtual network.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createVirtualNetworkTest() throws Exception {
        UUID id = null;
        VirtualNetworkCreateInput virtualNetwork = null;
        VirtualNetwork response = api.createVirtualNetwork(id, virtualNetwork);

        // TODO: test validations
    }
    
    /**
     * Delete the project
     *
     * Deletes the project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws Exception {
        UUID id = null;
        api.deleteProject(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all batches by project
     *
     * Returns all batches for the given project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findBatchesByProjectTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        BatchesList response = api.findBatchesByProject(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve a bgp config
     *
     * Returns a bgp config
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findBgpConfigByProjectTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        BgpConfig response = api.findBgpConfigByProject(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve a device&#39;s ssh keys
     *
     * Returns a collection of the device&#39;s ssh keys.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDeviceSSHKeysTest() throws Exception {
        UUID id = null;
        String searchString = null;
        List<String> include = null;
        List<String> exclude = null;
        SSHKeyList response = api.findDeviceSSHKeys(id, searchString, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all facilities visible by the project
     *
     * Returns a listing of available datacenters for the given project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findFacilitiesByProjectTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        FacilityList response = api.findFacilitiesByProject(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all global bgp ranges
     *
     * Returns all global bgp ranges for a project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findGlobalBgpRangesTest() throws Exception {
        UUID id = null;
        GlobalBgpRangeList response = api.findGlobalBgpRanges(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of an IP Reservation
     *
     * Provides the custom metadata stored for this IP Reservation in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findIPReservationCustomdataTest() throws Exception {
        UUID projectId = null;
        UUID id = null;
        api.findIPReservationCustomdata(projectId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all ip reservations
     *
     * Provides a list of IP resevations for a single project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findIPReservationsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        IPReservationList response = api.findIPReservations(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all projects of an organization
     *
     * Returns a collection of projects that belong to the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationProjectsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        ProjectList response = api.findOrganizationProjects(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all plans visible by the project
     *
     * Returns a listing of available plans for the given project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findPlansByProjectTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        PlanList response = api.findPlansByProject(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all BGP sessions for project
     *
     * Provides a listing of available BGP sessions for the project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectBgpSessionsTest() throws Exception {
        UUID id = null;
        BgpSessionList response = api.findProjectBgpSessions(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a project
     *
     * Returns a single project if the user has access
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Project response = api.findProjectById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of a project
     *
     * Provides the custom metadata stored for this project in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectCustomdataTest() throws Exception {
        UUID id = null;
        api.findProjectCustomdata(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all devices of a project
     *
     * Provides a collection of devices for a given project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectDevicesTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        DeviceList response = api.findProjectDevices(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve project&#39;s events
     *
     * Returns a list of events for a single project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectEventsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        EventList response = api.findProjectEvents(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all hardware reservations for a given project
     *
     * Provides a collection of hardware reservations for a given project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectHardwareReservationsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        HardwareReservationList response = api.findProjectHardwareReservations(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve project invitations
     *
     * Returns all invitations in a project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectInvitationsTest() throws Exception {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InvitationList response = api.findProjectInvitations(projectId, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all licenses
     *
     * Provides a collection of licenses for a given project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectLicensesTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        LicenseList response = api.findProjectLicenses(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve project memberships
     *
     * Returns all memberships in a project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectMembershipsTest() throws Exception {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        MembershipList response = api.findProjectMemberships(projectId, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve a project&#39;s ssh keys
     *
     * Returns a collection of the project&#39;s ssh keys.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectSSHKeysTest() throws Exception {
        UUID id = null;
        String searchString = null;
        List<String> include = null;
        List<String> exclude = null;
        SSHKeyList response = api.findProjectSSHKeys(id, searchString, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all projects
     *
     * Returns a collection of projects that the current user is a member of.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectsTest() throws Exception {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        ProjectList response = api.findProjects(include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all virtual networks
     *
     * Provides a list of virtual networks for a single project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findVirtualNetworksTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        String facility = null;
        String metro = null;
        VirtualNetworkList response = api.findVirtualNetworks(id, include, exclude, facility, metro);

        // TODO: test validations
    }
    
    /**
     * List spot market requests
     *
     * View all spot market requests for a given project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listSpotMarketRequestsTest() throws Exception {
        UUID id = null;
        SpotMarketRequestList response = api.listSpotMarketRequests(id);

        // TODO: test validations
    }
    
    /**
     * Requesting bgp config
     *
     * Requests to enable bgp configuration for a project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void requestBgpConfigTest() throws Exception {
        UUID id = null;
        BgpConfigRequestInput bgpConfigRequest = null;
        api.requestBgpConfig(id, bgpConfigRequest);

        // TODO: test validations
    }
    
    /**
     * Requesting IP reservations
     *
     * Request more IP space for a project in order to have additional IP addresses to assign to devices.  If the request is within the max quota, an IP reservation will be created. If the project will exceed its IP quota, a request will be submitted for review, and will return an IP Reservation with a &#x60;state&#x60; of &#x60;pending&#x60;. You can automatically have the request fail with HTTP status 422 instead of triggering the review process by providing the &#x60;fail_on_approval_required&#x60; parameter set to &#x60;true&#x60; in the request.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void requestIPReservationTest() throws Exception {
        UUID id = null;
        IPReservationRequestInput ipReservationRequest = null;
        IPReservation response = api.requestIPReservation(id, ipReservationRequest);

        // TODO: test validations
    }
    
    /**
     * Update the project
     *
     * Updates the project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateProjectTest() throws Exception {
        UUID id = null;
        ProjectUpdateInput project = null;
        Project response = api.updateProject(id, project);

        // TODO: test validations
    }
    
}
