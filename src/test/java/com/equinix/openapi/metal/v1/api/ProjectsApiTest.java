/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.metal.v1.model.Body23;
import com.equinix.openapi.metal.v1.model.Body24;
import com.equinix.openapi.metal.v1.model.Body31;
import com.equinix.openapi.metal.v1.model.Body35;
import com.equinix.openapi.metal.v1.model.InlineResponse20017;
import com.equinix.openapi.metal.v1.model.InlineResponse20018;
import com.equinix.openapi.metal.v1.model.InlineResponse20030;
import com.equinix.openapi.metal.v1.model.InlineResponse20031Transfers;
import com.equinix.openapi.metal.v1.model.InlineResponse20047;
import com.equinix.openapi.metal.v1.model.InlineResponse2011Project;
import com.equinix.openapi.metal.v1.model.InlineResponse401;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Ignore
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    
    /**
     * Create a project
     *
     * Creates a new project for the user default organization. If the user don&#39;t have an organization, a new one will be created.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() throws Exception {
        Body23 body = null;
        InlineResponse2011Project response = api.createProject(body);

        // TODO: test validations
    }
    
    /**
     * Create an invitation for a project
     *
     * In order to add a user to a project, they must first be invited.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createProjectInvitationTest() throws Exception {
        UUID projectId = null;
        Body35 body = null;
        InlineResponse20018 response = api.createProjectInvitation(projectId, body);

        // TODO: test validations
    }
    
    /**
     * Create a transfer request
     *
     * Organization owners can transfer their projects to other organizations.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createTransferRequestTest() throws Exception {
        UUID id = null;
        Body31 body = null;
        InlineResponse20031Transfers response = api.createTransferRequest(id, body);

        // TODO: test validations
    }
    
    /**
     * Delete the project
     *
     * Deletes the project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws Exception {
        UUID id = null;
        api.deleteProject(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of an IP Reservation
     *
     * Provides the custom metadata stored for this IP Reservation in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findIPReservationCustomdataTest() throws Exception {
        UUID projectId = null;
        UUID id = null;
        api.findIPReservationCustomdata(projectId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a project
     *
     * Returns a single project if the user has access
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse2011Project response = api.findProjectById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of a project
     *
     * Provides the custom metadata stored for this project in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectCustomdataTest() throws Exception {
        UUID id = null;
        api.findProjectCustomdata(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve project invitations
     *
     * Returns all invitations in a project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectInvitationsTest() throws Exception {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20017 response = api.findProjectInvitations(projectId, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve project memberships
     *
     * Returns all memberships in a project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectMembershipsTest() throws Exception {
        UUID projectId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20047 response = api.findProjectMemberships(projectId, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all projects
     *
     * Returns a collection of projects that the current user is a member of.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectsTest() throws Exception {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20030 response = api.findProjects(include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Update the project
     *
     * Updates the project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateProjectTest() throws Exception {
        UUID id = null;
        Body24 body = null;
        InlineResponse2011Project response = api.updateProject(id, body);

        // TODO: test validations
    }
    
}
