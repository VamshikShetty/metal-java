/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.metal.v1.model.Body3;
import com.equinix.openapi.metal.v1.model.Body4;
import com.equinix.openapi.metal.v1.model.Body5;
import com.equinix.openapi.metal.v1.model.Body6;
import com.equinix.openapi.metal.v1.model.InlineResponse2001;
import com.equinix.openapi.metal.v1.model.InlineResponse20010;
import com.equinix.openapi.metal.v1.model.InlineResponse20011;
import com.equinix.openapi.metal.v1.model.InlineResponse20013;
import com.equinix.openapi.metal.v1.model.InlineResponse20027;
import com.equinix.openapi.metal.v1.model.InlineResponse2009;
import com.equinix.openapi.metal.v1.model.InlineResponse2009IpAddresses;
import com.equinix.openapi.metal.v1.model.InlineResponse401;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Ignore
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    
    /**
     * Create a BGP session
     *
     * Creates a BGP session.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createBgpSessionTest() throws Exception {
        UUID id = null;
        Body4 body = null;
        InlineResponse2001 response = api.createBgpSession(id, body);

        // TODO: test validations
    }
    
    /**
     * Create a device
     *
     * Creates a new device and provisions it in the specified location.  Device type-specific options are accepted.  For example, &#x60;baremetal&#x60; devices accept &#x60;operating_system&#x60;, &#x60;hostname&#x60;, and &#x60;plan&#x60;. These parameters may not be accepted for other device types. The default device type is &#x60;baremetal&#x60;.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDeviceTest() throws Exception {
        UUID id = null;
        object body = null;
        InlineResponse2009 response = api.createDevice(id, body);

        // TODO: test validations
    }
    
    /**
     * Create an ip assignment
     *
     * Creates an ip assignment for a device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createIPAssignmentTest() throws Exception {
        UUID id = null;
        Body5 body = null;
        InlineResponse2009IpAddresses response = api.createIPAssignment(id, body);

        // TODO: test validations
    }
    
    /**
     * Delete the device
     *
     * Deletes a device and deprovisions it in our datacenter.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws Exception {
        UUID id = null;
        Boolean forceDelete = null;
        api.deleteDevice(id, forceDelete);

        // TODO: test validations
    }
    
    /**
     * Retrieve all BGP sessions
     *
     * Provides a listing of available BGP sessions for the device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findBgpSessionsTest() throws Exception {
        UUID id = null;
        InlineResponse20011 response = api.findBgpSessions(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a device
     *
     * Type-specific options (such as facility for baremetal devices) will be included as part of the main data structure.                          State value can be one of: active inactive queued or provisioning
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDeviceByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse2009 response = api.findDeviceById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of an instance
     *
     * Provides the custom metadata stored for this instance in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDeviceCustomdataTest() throws Exception {
        UUID id = null;
        api.findDeviceCustomdata(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of an IP Assignment
     *
     * Provides the custom metadata stored for this IP Assignment in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findIPAssignmentCustomdataTest() throws Exception {
        UUID instanceId = null;
        UUID id = null;
        api.findIPAssignmentCustomdata(instanceId, id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all ip assignments
     *
     * Returns all ip assignments for a device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findIPAssignmentsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse20013 response = api.findIPAssignments(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve an instance bandwidth
     *
     * Retrieve an instance bandwidth for a given period of time.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findInstanceBandwidthTest() throws Exception {
        UUID id = null;
        String from = null;
        String until = null;
        api.findInstanceBandwidth(id, from, until);

        // TODO: test validations
    }
    
    /**
     * Retrieve all devices of an organization
     *
     * Provides a collection of devices for a given organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationDevicesTest() throws Exception {
        UUID id = null;
        String facility = null;
        String hostname = null;
        Boolean reserved = null;
        String tag = null;
        String type = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20027 response = api.findOrganizationDevices(id, facility, hostname, reserved, tag, type, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all devices of a project
     *
     * Provides a collection of devices for a given project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectDevicesTest() throws Exception {
        UUID id = null;
        String facility = null;
        String hostname = null;
        Boolean reserved = null;
        String tag = null;
        String type = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20027 response = api.findProjectDevices(id, facility, hostname, reserved, tag, type, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve device traffic
     *
     * Returns traffic for a specific device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findTrafficTest() throws Exception {
        UUID id = null;
        String direction = null;
        Body6 body = null;
        String interval = null;
        String bucket = null;
        api.findTraffic(id, direction, body, interval, bucket);

        // TODO: test validations
    }
    
    /**
     * Retrieve BGP neighbor data for this device
     *
     * Provides a summary of the BGP neighbor data associated to the BGP sessions for this device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBgpNeighborDataTest() throws Exception {
        UUID id = null;
        InlineResponse20010 response = api.getBgpNeighborData(id);

        // TODO: test validations
    }
    
    /**
     * Perform an action
     *
     * Performs an action for the given device.  Possible actions include: power_on, power_off, reboot, reinstall, and rescue (reboot the device into rescue OS.)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void performActionTest() throws Exception {
        UUID id = null;
        String type = null;
        api.performAction(id, type);

        // TODO: test validations
    }
    
    /**
     * Update the device
     *
     * Updates the device.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws Exception {
        UUID id = null;
        Body3 body = null;
        InlineResponse2009 response = api.updateDevice(id, body);

        // TODO: test validations
    }
    
}
