/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.metal.v1.model.InlineResponse20012;
import com.equinix.openapi.metal.v1.model.InlineResponse2007;
import com.equinix.openapi.metal.v1.model.InlineResponse401;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Ignore
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    
    /**
     * Retrieve connection events
     *
     * Returns a list of the connection events
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findConnectionEventsTest() throws Exception {
        UUID connectionId = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse2007 response = api.findConnectionEvents(connectionId, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection port events
     *
     * Returns a list of the connection port events
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findConnectionPortEventsTest() throws Exception {
        UUID connectionId = null;
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse2007 response = api.findConnectionPortEvents(connectionId, id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve device&#39;s events
     *
     * Returns a list of events pertaining to a specific device
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findDeviceEventsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20012 response = api.findDeviceEvents(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve an event
     *
     * Returns a single event if the user has access
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findEventByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse2007 response = api.findEventById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve current user&#39;s events
     *
     * Returns a list of the current userâ€™s events
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findEventsTest() throws Exception {
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20012 response = api.findEvents(include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve organization&#39;s events
     *
     * Returns a list of events for a single organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationEventsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20012 response = api.findOrganizationEvents(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve project&#39;s events
     *
     * Returns a list of events for a single project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProjectEventsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20012 response = api.findProjectEvents(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve connection events
     *
     * Returns a list of the virtual circuit events
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findVirtualCircuitEventsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse2007 response = api.findVirtualCircuitEvents(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
}
