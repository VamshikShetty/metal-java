/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.metal.v1.model.Body33;
import com.equinix.openapi.metal.v1.model.Body43;
import com.equinix.openapi.metal.v1.model.InlineResponse20046;
import com.equinix.openapi.metal.v1.model.InlineResponse20046Vrfs;
import com.equinix.openapi.metal.v1.model.InlineResponse20052;
import com.equinix.openapi.metal.v1.model.InlineResponse401;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VrFsApi
 */
@Ignore
public class VrFsApiTest {

    private final VrFsApi api = new VrFsApi();

    
    /**
     * Create a new VRF in the specified project
     *
     * Creates a new VRF in the specified project
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createVrfTest() throws Exception {
        UUID id = null;
        Body33 body = null;
        InlineResponse20046Vrfs response = api.createVrf(id, body);

        // TODO: test validations
    }
    
    /**
     * Delete the VRF
     *
     * Deletes the VRF
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteVrfTest() throws Exception {
        UUID id = null;
        api.deleteVrf(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve a VRF
     *
     * Returns a single VRF resource
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findVrfByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse20046Vrfs response = api.findVrfById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all VRF IP Reservations in the VRF
     *
     * Returns the list of VRF IP Reservations for the VRF.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findVrfIpReservationsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse20052 response = api.findVrfIpReservations(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all VRFs in the project
     *
     * Returns the list of VRFs for a single project.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findVrfsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        String metro = null;
        InlineResponse20046 response = api.findVrfs(id, include, exclude, metro);

        // TODO: test validations
    }
    
    /**
     * Update the VRF
     *
     * Updates the VRF.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateVrfTest() throws Exception {
        UUID id = null;
        Body43 body = null;
        InlineResponse20046Vrfs response = api.updateVrf(id, body);

        // TODO: test validations
    }
    
}
