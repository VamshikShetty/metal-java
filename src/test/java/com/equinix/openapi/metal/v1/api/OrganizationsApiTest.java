/*
 * Metal API
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@equinixmetal.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.equinix.openapi.metal.v1.api;

import com.equinix.openapi.metal.v1.model.Body11;
import com.equinix.openapi.metal.v1.model.Body12;
import com.equinix.openapi.metal.v1.model.Body13;
import com.equinix.openapi.metal.v1.model.Body14;
import com.equinix.openapi.metal.v1.model.Body15;
import com.equinix.openapi.metal.v1.model.InlineResponse20017;
import com.equinix.openapi.metal.v1.model.InlineResponse20018;
import com.equinix.openapi.metal.v1.model.InlineResponse20025;
import com.equinix.openapi.metal.v1.model.InlineResponse20026;
import com.equinix.openapi.metal.v1.model.InlineResponse20026Organizations;
import com.equinix.openapi.metal.v1.model.InlineResponse20028;
import com.equinix.openapi.metal.v1.model.InlineResponse20028PaymentMethods;
import com.equinix.openapi.metal.v1.model.InlineResponse20029;
import com.equinix.openapi.metal.v1.model.InlineResponse20030;
import com.equinix.openapi.metal.v1.model.InlineResponse20031;
import com.equinix.openapi.metal.v1.model.InlineResponse2011Project;
import com.equinix.openapi.metal.v1.model.InlineResponse401;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganizationsApi
 */
@Ignore
public class OrganizationsApiTest {

    private final OrganizationsApi api = new OrganizationsApi();

    
    /**
     * Create an organization
     *
     * Creates an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws Exception {
        Body11 body = null;
        InlineResponse20026Organizations response = api.createOrganization(body);

        // TODO: test validations
    }
    
    /**
     * Create an invitation for an organization
     *
     * In order to add a user to an organization, they must first be invited. To invite to several projects the parameter &#x60;projects_ids:[a,b,c]&#x60; can be used
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationInvitationTest() throws Exception {
        UUID id = null;
        Body13 body = null;
        InlineResponse20018 response = api.createOrganizationInvitation(id, body);

        // TODO: test validations
    }
    
    /**
     * Create a project for the organization
     *
     * Creates a new project for the organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createOrganizationProjectTest() throws Exception {
        UUID id = null;
        Body15 body = null;
        InlineResponse2011Project response = api.createOrganizationProject(id, body);

        // TODO: test validations
    }
    
    /**
     * Create a payment method for the given organization
     *
     * Creates a payment method.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPaymentMethodTest() throws Exception {
        UUID id = null;
        Body14 body = null;
        InlineResponse20028PaymentMethods response = api.createPaymentMethod(id, body);

        // TODO: test validations
    }
    
    /**
     * Delete the organization
     *
     * Deletes the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws Exception {
        UUID id = null;
        api.deleteOrganization(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve all operating systems visible by the organization
     *
     * Returns a listing of available operating systems for the given organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOperatingSystemsByOrganizationTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse20025 response = api.findOperatingSystemsByOrganization(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve an organization&#39;s details
     *
     * Returns a single organization&#39;s details, if the user is authorized to view it.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationByIdTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse20026Organizations response = api.findOrganizationById(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve the custom metadata of an organization
     *
     * Provides the custom metadata stored for this organization in json format
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationCustomdataTest() throws Exception {
        UUID id = null;
        api.findOrganizationCustomdata(id);

        // TODO: test validations
    }
    
    /**
     * Retrieve organization invitations
     *
     * Returns all invitations in an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationInvitationsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20017 response = api.findOrganizationInvitations(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all payment methods of an organization
     *
     * Returns all payment methods of an organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationPaymentMethodsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20028 response = api.findOrganizationPaymentMethods(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all projects of an organization
     *
     * Returns a collection of projects that belong to the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationProjectsTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20030 response = api.findOrganizationProjects(id, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all project transfer requests from or to an organization
     *
     * Provides a collection of project transfer requests from or to the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationTransfersTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse20031 response = api.findOrganizationTransfers(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Retrieve all organizations
     *
     * Returns a list of organizations that are accessible to the current user.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findOrganizationsTest() throws Exception {
        String personal = null;
        String withoutProjects = null;
        List<String> include = null;
        List<String> exclude = null;
        Integer page = null;
        Integer perPage = null;
        InlineResponse20026 response = api.findOrganizations(personal, withoutProjects, include, exclude, page, perPage);

        // TODO: test validations
    }
    
    /**
     * Retrieve all plans visible by the organization
     *
     * Returns a listing of available plans for the given organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findPlansByOrganizationTest() throws Exception {
        UUID id = null;
        List<String> include = null;
        List<String> exclude = null;
        InlineResponse20029 response = api.findPlansByOrganization(id, include, exclude);

        // TODO: test validations
    }
    
    /**
     * Update the organization
     *
     * Updates the organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateOrganizationTest() throws Exception {
        UUID id = null;
        Body12 body = null;
        InlineResponse20026Organizations response = api.updateOrganization(id, body);

        // TODO: test validations
    }
    
}
